#!r6rs
;; Copyright (c) 2009 Derick Eddington.  All rights reserved.  Licensed under an
;; MIT-style license.  My license is in the file named LICENSE from the original
;; collection this file is distributed with.  If this file is redistributed with
;; some other collection, my license must also be included.

(import
  (rnrs)
  (srfi :78 lightweight-testing)
  (xitomatl byte-expressions))

(define-syntax with-test
  (lambda (stx)
    (syntax-case stx ()
      ((ctxt from to expr ...)
       (with-syntax ((test (datum->syntax #'ctxt 'test)))
         #'(let-syntax ((test (syntax-rules () (from to))))
             expr ...))))))

;;;; bytevector->varbytes and varbytes->bytevector

(with-test
    (_ x <=> y)
    (let ((bv x) (vb y))
      (check (call-with-bytevector-output-port
               (lambda (bop) (bytevector->varbytes bv bop)))
             => vb)
      (check (varbytes->bytevector (open-bytevector-input-port vb))
             => bv))
  (test #vu8(0) <=> #vu8(0))
  (test #vu8(1) <=> #vu8(1))
  (test #vu8(#b00001100) <=> #vu8(#b00001100))
  (test #vu8(#b01111111) <=> #vu8(#b01111111))
  (test #vu8(#b10000000) <=> #vu8(#b10000001 #b00000000))
  (test #vu8(#b11000100) <=> #vu8(#b10000001 #b01000100))
  (test #vu8(#b11100001) <=> #vu8(#b10000001 #b01100001))
  (test #vu8(#b11111111) <=> #vu8(#b10000001 #b01111111))
  (test #vu8(#b00000000 #b00000000) <=> #vu8(#b10000000 #b10000000 #b00000000))
  (test #vu8(#b00000000 #b00000010) <=> #vu8(#b10000000 #b10000000 #b00000010))
  (test #vu8(#b00000000 #b11111111) <=> #vu8(#b10000000 #b10000001 #b01111111))
  (test #vu8(#b00000001 #b00000000) <=> #vu8(#b10000010 #b0000000))
  (test #vu8(#b00010000 #b00000000) <=> #vu8(#b10100000 #b0000000))
  (test #vu8(#b01011101 #b10011100) <=> #vu8(#b10000001 #b10111011 #b00011100))
  (test #vu8(#b01111111 #b11111111) <=> #vu8(#b10000001 #b11111111 #b01111111))
  (test #vu8(#b11101100 #b01010101) <=> #vu8(#b10000011 #b11011000 #b01010101))

  (test #vu8(#b00000000 #b00000000 #b00000000 #b00000000)
        <=> #vu8(#b10000000 #b10000000 #b10000000 #b10000000 #b00000000))
  (test #vu8(#b00000000 #b00000000 #b00000000 #b00000000
             #b00000000 #b00000000 #b00000000)
        <=> #vu8(#b10000000 #b10000000 #b10000000 #b10000000
                 #b10000000 #b10000000 #b10000000 #b00000000))
  (test #vu8(#b00000000 #b00000000 #b10000000 #b10000000)
        <=> #vu8(#b10000000 #b10000000 #b10000010 #b10000001 #b00000000))
  (test #vu8(#b00000001 #b00000000 #b00000000 #b00000000 #b10000001)
        <=> #vu8(#b10010000 #b10000000 #b10000000 #b10000001 #b00000001))
  (test #vu8(#b00000100 #b00010100 #b01000101 #b00000100 #b01010101)
        <=> #vu8(#b11000001 #b10100010 #b10010100 #b10001000 #b01010101))
  (test #vu8(#b00001000 #b00010100 #b01000101 #b00000100 #b01010101)
        <=> #vu8(#b10000001 #b10000001 #b10100010 #b10010100 #b10001000 #b01010101))
  (test #vu8(#b00000000 #b00010100 #b01000101 #b00000100 #b01010101)
        <=> #vu8(#b10000000 #b10000001 #b10100010 #b10010100 #b10001000 #b01010101))
  (test #vu8(#b00010100 #b01000101 #b00000100 #b01010101)
        <=> #vu8(#b10000001 #b10100010 #b10010100 #b10001000 #b01010101))

  (test #vu8(#b01010101 #b01010101 #b01010101 #b01010101
             #b01010101 #b01010101 #b01010101)
        <=> #vu8(#b10101010 #b11010101 #b10101010 #b11010101
                 #b10101010 #b11010101 #b10101010 #b01010101))
  (test #vu8(#b01010101 #b01010101 #b01010101 #b01010101
             #b01010101 #b01010101 #b01010101 #b01010101)
        <=> #vu8(#b11010101 #b10101010 #b11010101 #b10101010
                 #b11010101 #b10101010 #b11010101 #b10101010
                 #b01010101))
  (test #vu8(#b01010101 #b01010101 #b01010101 #b01010101
             #b01010101 #b01010101 #b01010101 #b01010101
             #b01010101)
        <=> #vu8(#b10000001 #b10101010 #b11010101 #b10101010
                 #b11010101 #b10101010 #b11010101 #b10101010
                 #b11010101 #b10101010 #b01010101))
  (test #vu8(#b00000000 #b01010101 #b01010101 #b01010101
             #b01010101 #b01010101 #b01010101 #b01010101
             #b01010101)
        <=> #vu8(#b10000000 #b10000000 #b11010101 #b10101010
                 #b11010101 #b10101010 #b11010101 #b10101010
                 #b11010101 #b10101010 #b01010101))

  (test #vu8(#b10101010 #b10101010 #b10101010 #b10101010
             #b10101010 #b10101010 #b10101010)
        <=> #vu8(#b11010101 #b10101010 #b11010101 #b10101010
                 #b11010101 #b10101010 #b11010101 #b00101010))
  (test #vu8(#b10101010 #b10101010 #b10101010 #b10101010
             #b10101010 #b10101010 #b10101010 #b10101010)
        <=> #vu8(#b10000001 #b10101010 #b11010101 #b10101010
                 #b11010101 #b10101010 #b11010101 #b10101010
                 #b11010101 #b00101010))
  (test #vu8(#b10101010 #b10101010 #b10101010 #b10101010
             #b10101010 #b10101010 #b10101010 #b10101010
             #b10101010)
        <=> #vu8(#b10000010 #b11010101 #b10101010 #b11010101
                 #b10101010 #b11010101 #b10101010 #b11010101
                 #b10101010 #b11010101 #b00101010))
  (test #vu8(#b00000000 #b10101010 #b10101010 #b10101010
             #b10101010 #b10101010 #b10101010 #b10101010
             #b10101010)
        <=> #vu8(#b10000000 #b10000001 #b10101010 #b11010101
                 #b10101010 #b11010101 #b10101010 #b11010101
                 #b10101010 #b11010101 #b00101010)))

;;;; varbytes->bytevector extra cases

(with-test
    (_ vb => bv)
    (check (varbytes->bytevector (open-bytevector-input-port vb)) => bv)
  (test #vu8(#x80 0) => #vu8(0))
  (test #vu8(#x80 1) => #vu8(1))
  (test #vu8(#b10000000 #b00001100) => #vu8(#b00001100))
  (test #vu8(#b10000000 #b01111111) => #vu8(#b01111111))
  (test #vu8(#b10000000 #b10000001 #b00000000) => #vu8(#b00000000 #b10000000))
  (test #vu8(#b10000000 #b10000001 #b01000100) => #vu8(#b00000000 #b11000100))
  (test #vu8(#b10000000 #b10000001 #b01100001) => #vu8(#b00000000 #b11100001))
  (test #vu8(#b10000000 #b10000001 #b01111111) => #vu8(#b00000000 #b11111111))
  (test #vu8(#b10000000 #b10000000 #b10000000 #b00000000)
        => #vu8(#b00000000 #b00000000 #b00000000))
  (test #vu8(#b10000000 #b10000000 #b10000000 #b00000010)
        => #vu8(#b00000000 #b00000000 #b00000010))
  (test #vu8(#b10000000 #b10000000 #b10000001 #b01111111)
        => #vu8(#b00000000 #b00000000 #b11111111))
  (test #vu8(#b10000000 #b10000010 #b0000000)
        => #vu8(#b00000001 #b00000000))
  (test #vu8(#b10000000 #b10100000 #b0000000)
        => #vu8(#b00010000 #b00000000))
  (test #vu8(#b10000000 #b10000001 #b10111011 #b00011100)
        => #vu8(#b00000000 #b01011101 #b10011100))
  (test #vu8(#b10000000 #b10000001 #b11111111 #b01111111)
        => #vu8(#b00000000 #b01111111 #b11111111))
  (test #vu8(#b10000000 #b10000011 #b11011000 #b01010101)
        => #vu8(#b00000000 #b11101100 #b01010101))
  (test #vu8(#b10000000 #b11000001 #b10100010 #b10010100 #b10001000 #b01010101)
        => #vu8(#b00000100 #b00010100 #b01000101 #b00000100 #b01010101))
  (test #vu8(#b10000000 #b10000001 #b10000001 #b10100010
             #b10010100 #b10001000 #b01010101)
        => #vu8(#b00000000 #b00001000 #b00010100 #b01000101 #b00000100 #b01010101))
  (test #vu8(#b10000000 #b11010101 #b10101010 #b11010101
             #b10101010 #b11010101 #b10101010 #b11010101
             #b10101010 #b01010101)
        => #vu8(#b01010101 #b01010101 #b01010101 #b01010101
                #b01010101 #b01010101 #b01010101 #b01010101))
  (test #vu8(#b10000000 #b10000001 #b10101010 #b11010101
             #b10101010 #b11010101 #b10101010 #b11010101
             #b10101010 #b11010101 #b00101010)
        => #vu8(#b00000000 #b10101010 #b10101010 #b10101010
                #b10101010 #b10101010 #b10101010 #b10101010
                #b10101010)))

;;;; reader

(with-test
    (_ bv p => v)
    (check ((reader p) (open-bytevector-input-port bv))
           => v)
  (let ((atom-helper
         (lambda (tag bip)
           (case (bytevector->uint tag)
             ((3) 'three)
             ((4 5) "4,5")
             ((6) (get-sized-bytes bip))
             ((321) 321)
             (else (assert #F))))))
    (with-test
        (_ bv => v)
        (test bv atom-helper => v)
      (test #vu8() => (eof-object))
      (test #vu8(#x00) => (eof-object))
      (test #vu8(#x00 #x00) => (eof-object))
      (test #vu8(#x03) => 'three)
      (test #vu8(#x04) => "4,5")
      (test #vu8(#x06 #x03 #xAB #xCD #xEF) => #vu8(#xAB #xCD #xEF))
      (test #vu8(#x82 #x41) => 321)
      (test #vu8(#x01 #x02) => '())
      (test #vu8(#x01 #x01 #x02 #x02) => '(()))
      (test #vu8(#x03 #x04) => 'three)
      (test #vu8(#x00 #x03) => 'three)
      (test #vu8(#x00 #x00 #x00 #x00 #x82 #x41) => 321)
      (test #vu8(#x01 #x00 #x00 #x02) => '())
      (test #vu8(#x01 #x00 #x00 #x00 #x01 #x02 #x00 #x02)
            => '(()))
      (test #vu8(#x01 #x03 #x05 #x06 #x02 #x02 #xFF #x02)
            => '(three "4,5" #vu8(#x02 #xFF)))
      (test #vu8(#x01 #x03 #x01 #x05 #x02 #x06 #x02 #x02 #xFF #x02)
            => '(three ("4,5") #vu8(#x02 #xFF)))
      (test #vu8(#x01 #x01 #x00 #x00 #x01 #x02 #x03 #x02 #x01 #x04 #x00
                 #x00 #x00 #x06 #x00 #x02 #x00 #x00 #x00 #x00 #x82 #x41 #x02)
            => '((() three) ("4,5" #vu8()) 321)))))

(let-syntax
    ((test-ex
      (syntax-rules ()
        ((_ bv => msg)
         (check (guard (ex ((and (i/o-read-error? ex)
                                 (who-condition? ex)
                                 (message-condition? ex)
                                 (i/o-port-error? ex))
                            (condition-message ex)))
                  ((reader (lambda _ 'x))
                   (open-bytevector-input-port bv))
                  'unexpected-return)
                => msg)))))
  (test-ex #vu8(#x01) => "EOF inside list")
  (test-ex #vu8(#x02) => "unexpected list end")
  (test-ex #vu8(#x01 #x01 #x03 #x01 #x05 #x02) => "EOF inside list"))


(check-report)
