(((rnrs arithmetic bitwise (6)) ((name bitwise-arithmetic-shift-right) (type variable) (from ()) (levels (0))) ((name bitwise-arithmetic-shift-left) (type variable) (from ()) (levels (0))) ((name bitwise-arithmetic-shift) (type variable) (from ()) (levels (0))) ((name bitwise-reverse-bit-field) (type variable) (from ()) (levels (0))) ((name bitwise-rotate-bit-field) (type variable) (from ()) (levels (0))) ((name bitwise-copy-bit-field) (type variable) (from ()) (levels (0))) ((name bitwise-bit-field) (type variable) (from ()) (levels (0))) ((name bitwise-copy-bit) (type variable) (from ()) (levels (0))) ((name bitwise-bit-set?) (type variable) (from ()) (levels (0))) ((name bitwise-first-bit-set) (type variable) (from ()) (levels (0))) ((name bitwise-length) (type variable) (from ()) (levels (0))) ((name bitwise-bit-count) (type variable) (from ()) (levels (0))) ((name bitwise-if) (type variable) (from ()) (levels (0))) ((name bitwise-xor) (type variable) (from ()) (levels (0))) ((name bitwise-ior) (type variable) (from ()) (levels (0))) ((name bitwise-and) (type variable) (from ()) (levels (0))) ((name bitwise-not) (type variable) (from ()) (levels (0)))) ((rnrs arithmetic fixnums (6)) ((name fxarithmetic-shift-right) (type variable) (from ()) (levels (0))) ((name fxarithmetic-shift-left) (type variable) (from ()) (levels (0))) ((name fxarithmetic-shift) (type variable) (from ()) (levels (0))) ((name fxreverse-bit-field) (type variable) (from ()) (levels (0))) ((name fxrotate-bit-field) (type variable) (from ()) (levels (0))) ((name fxcopy-bit-field) (type variable) (from ()) (levels (0))) ((name fxbit-field) (type variable) (from ()) (levels (0))) ((name fxcopy-bit) (type variable) (from ()) (levels (0))) ((name fxbit-set?) (type variable) (from ()) (levels (0))) ((name fxfirst-bit-set) (type variable) (from ()) (levels (0))) ((name fxlength) (type variable) (from ()) (levels (0))) ((name fxbit-count) (type variable) (from ()) (levels (0))) ((name fxif) (type variable) (from ()) (levels (0))) ((name fxxor) (type variable) (from ()) (levels (0))) ((name fxior) (type variable) (from ()) (levels (0))) ((name fxand) (type variable) (from ()) (levels (0))) ((name fxnot) (type variable) (from ()) (levels (0))) ((name fx*/carry) (type variable) (from ()) (levels (0))) ((name fx-/carry) (type variable) (from ()) (levels (0))) ((name fx+/carry) (type variable) (from ()) (levels (0))) ((name fxmod0) (type variable) (from ()) (levels (0))) ((name fxdiv0) (type variable) (from ()) (levels (0))) ((name fxdiv0-and-mod0) (type variable) (from ()) (levels (0))) ((name fxmod) (type variable) (from ()) (levels (0))) ((name fxdiv) (type variable) (from ()) (levels (0))) ((name fxdiv-and-mod) (type variable) (from ()) (levels (0))) ((name fx*) (type variable) (from ()) (levels (0))) ((name fx-) (type variable) (from ()) (levels (0))) ((name fx+) (type variable) (from ()) (levels (0))) ((name fxmin) (type variable) (from ()) (levels (0))) ((name fxmax) (type variable) (from ()) (levels (0))) ((name fxeven?) (type variable) (from ()) (levels (0))) ((name fxodd?) (type variable) (from ()) (levels (0))) ((name fxnegative?) (type variable) (from ()) (levels (0))) ((name fxpositive?) (type variable) (from ()) (levels (0))) ((name fxzero?) (type variable) (from ()) (levels (0))) ((name fx<=?) (type variable) (from ()) (levels (0))) ((name fx>=?) (type variable) (from ()) (levels (0))) ((name fx<?) (type variable) (from ()) (levels (0))) ((name fx>?) (type variable) (from ()) (levels (0))) ((name fx=?) (type variable) (from ()) (levels (0))) ((name greatest-fixnum) (type variable) (from ()) (levels (0))) ((name least-fixnum) (type variable) (from ()) (levels (0))) ((name fixnum-width) (type variable) (from ()) (levels (0))) ((name fixnum?) (type variable) (from ()) (levels (0)))) ((rnrs arithmetic flonums (6)) ((name fixnum->flonum) (type variable) (from ()) (levels (0))) ((name no-nans-violation?) (type variable) (from ()) (levels (0))) ((name make-no-nans-violation) (type variable) (from ()) (levels (0))) ((name &no-nans) (type variable) (from ()) (levels (0))) ((name no-infinities-violation?) (type variable) (from ()) (levels (0))) ((name make-no-infinities-violation) (type variable) (from ()) (levels (0))) ((name &no-infinities) (type variable) (from ()) (levels (0))) ((name flexpt) (type variable) (from ()) (levels (0))) ((name flsqrt) (type variable) (from ()) (levels (0))) ((name flatan) (type variable) (from ()) (levels (0))) ((name flacos) (type variable) (from ()) (levels (0))) ((name flasin) (type variable) (from ()) (levels (0))) ((name fltan) (type variable) (from ()) (levels (0))) ((name flcos) (type variable) (from ()) (levels (0))) ((name flsin) (type variable) (from ()) (levels (0))) ((name fllog) (type variable) (from ()) (levels (0))) ((name flexp) (type variable) (from ()) (levels (0))) ((name flround) (type variable) (from ()) (levels (0))) ((name fltruncate) (type variable) (from ()) (levels (0))) ((name flceiling) (type variable) (from ()) (levels (0))) ((name flfloor) (type variable) (from ()) (levels (0))) ((name fldenominator) (type variable) (from ()) (levels (0))) ((name flnumerator) (type variable) (from ()) (levels (0))) ((name flmod0) (type variable) (from ()) (levels (0))) ((name fldiv0) (type variable) (from ()) (levels (0))) ((name fldiv0-and-mod0) (type variable) (from ()) (levels (0))) ((name flmod) (type variable) (from ()) (levels (0))) ((name fldiv) (type variable) (from ()) (levels (0))) ((name fldiv-and-mod) (type variable) (from ()) (levels (0))) ((name flabs) (type variable) (from ()) (levels (0))) ((name fl/) (type variable) (from ()) (levels (0))) ((name fl-) (type variable) (from ()) (levels (0))) ((name fl*) (type variable) (from ()) (levels (0))) ((name fl+) (type variable) (from ()) (levels (0))) ((name flmin) (type variable) (from ()) (levels (0))) ((name flmax) (type variable) (from ()) (levels (0))) ((name flnan?) (type variable) (from ()) (levels (0))) ((name flinfinite?) (type variable) (from ()) (levels (0))) ((name flfinite?) (type variable) (from ()) (levels (0))) ((name fleven?) (type variable) (from ()) (levels (0))) ((name flodd?) (type variable) (from ()) (levels (0))) ((name flnegative?) (type variable) (from ()) (levels (0))) ((name flpositive?) (type variable) (from ()) (levels (0))) ((name flzero?) (type variable) (from ()) (levels (0))) ((name flinteger?) (type variable) (from ()) (levels (0))) ((name fl>=?) (type variable) (from ()) (levels (0))) ((name fl<=?) (type variable) (from ()) (levels (0))) ((name fl>?) (type variable) (from ()) (levels (0))) ((name fl<?) (type variable) (from ()) (levels (0))) ((name fl=?) (type variable) (from ()) (levels (0))) ((name real->flonum) (type variable) (from ()) (levels (0))) ((name flonum?) (type variable) (from ()) (levels (0)))) ((rnrs base (6)) ((name call/cc) (type variable) (from ()) (levels (0))) ((name assertion-violation) (type variable) (from ()) (levels (0))) ((name error) (type variable) (from ()) (levels (0))) ((name vector-for-each) (type variable) (from ()) (levels (0))) ((name vector-map) (type variable) (from ()) (levels (0))) ((name string-for-each) (type variable) (from ()) (levels (0))) ((name symbol=?) (type variable) (from ()) (levels (0))) ((name boolean=?) (type variable) (from ()) (levels (0))) ((name exact-integer-sqrt) (type variable) (from ()) (levels (0))) ((name div0-and-mod0) (type variable) (from ()) (levels (0))) ((name mod0) (type variable) (from ()) (levels (0))) ((name div0) (type variable) (from ()) (levels (0))) ((name div-and-mod) (type variable) (from ()) (levels (0))) ((name mod) (type variable) (from ()) (levels (0))) ((name div) (type variable) (from ()) (levels (0))) ((name nan?) (type variable) (from ()) (levels (0))) ((name infinite?) (type variable) (from ()) (levels (0))) ((name finite?) (type variable) (from ()) (levels (0))) ((name inexact) (type variable) (from ()) (levels (0))) ((name exact) (type variable) (from ()) (levels (0))) ((name integer-valued?) (type variable) (from ()) (levels (0))) ((name rational-valued?) (type variable) (from ()) (levels (0))) ((name real-valued?) (type variable) (from ()) (levels (0))) ((name zero?) (type variable) (from ()) (levels (0))) ((name vector?) (type variable) (from ()) (levels (0))) ((name vector-set!) (type variable) (from ()) (levels (0))) ((name vector-ref) (type variable) (from ()) (levels (0))) ((name vector-length) (type variable) (from ()) (levels (0))) ((name vector-fill!) (type variable) (from ()) (levels (0))) ((name vector->list) (type variable) (from ()) (levels (0))) ((name vector) (type variable) (from ()) (levels (0))) ((name values) (type variable) (from ()) (levels (0))) ((name truncate) (type variable) (from ()) (levels (0))) ((name tan) (type variable) (from ()) (levels (0))) ((name symbol?) (type variable) (from ()) (levels (0))) ((name symbol->string) (type variable) (from ()) (levels (0))) ((name substring) (type variable) (from ()) (levels (0))) ((name string?) (type variable) (from ()) (levels (0))) ((name string>?) (type variable) (from ()) (levels (0))) ((name string>=?) (type variable) (from ()) (levels (0))) ((name string=?) (type variable) (from ()) (levels (0))) ((name string<?) (type variable) (from ()) (levels (0))) ((name string<=?) (type variable) (from ()) (levels (0))) ((name string-ref) (type variable) (from ()) (levels (0))) ((name string-length) (type variable) (from ()) (levels (0))) ((name string-copy) (type variable) (from ()) (levels (0))) ((name string-append) (type variable) (from ()) (levels (0))) ((name string->symbol) (type variable) (from ()) (levels (0))) ((name string->number) (type variable) (from ()) (levels (0))) ((name string->list) (type variable) (from ()) (levels (0))) ((name string) (type variable) (from ()) (levels (0))) ((name sqrt) (type variable) (from ()) (levels (0))) ((name sin) (type variable) (from ()) (levels (0))) ((name round) (type variable) (from ()) (levels (0))) ((name reverse) (type variable) (from ()) (levels (0))) ((name real?) (type variable) (from ()) (levels (0))) ((name real-part) (type variable) (from ()) (levels (0))) ((name rationalize) (type variable) (from ()) (levels (0))) ((name rational?) (type variable) (from ()) (levels (0))) ((name procedure?) (type variable) (from ()) (levels (0))) ((name positive?) (type variable) (from ()) (levels (0))) ((name pair?) (type variable) (from ()) (levels (0))) ((name odd?) (type variable) (from ()) (levels (0))) ((name numerator) (type variable) (from ()) (levels (0))) ((name number?) (type variable) (from ()) (levels (0))) ((name number->string) (type variable) (from ()) (levels (0))) ((name null?) (type variable) (from ()) (levels (0))) ((name not) (type variable) (from ()) (levels (0))) ((name negative?) (type variable) (from ()) (levels (0))) ((name min) (type variable) (from ()) (levels (0))) ((name max) (type variable) (from ()) (levels (0))) ((name map) (type variable) (from ()) (levels (0))) ((name make-vector) (type variable) (from ()) (levels (0))) ((name make-string) (type variable) (from ()) (levels (0))) ((name make-rectangular) (type variable) (from ()) (levels (0))) ((name make-polar) (type variable) (from ()) (levels (0))) ((name magnitude) (type variable) (from ()) (levels (0))) ((name log) (type variable) (from ()) (levels (0))) ((name list?) (type variable) (from ()) (levels (0))) ((name list-tail) (type variable) (from ()) (levels (0))) ((name list-ref) (type variable) (from ()) (levels (0))) ((name list->vector) (type variable) (from ()) (levels (0))) ((name list->string) (type variable) (from ()) (levels (0))) ((name list) (type variable) (from ()) (levels (0))) ((name length) (type variable) (from ()) (levels (0))) ((name lcm) (type variable) (from ()) (levels (0))) ((name integer?) (type variable) (from ()) (levels (0))) ((name integer->char) (type variable) (from ()) (levels (0))) ((name inexact?) (type variable) (from ()) (levels (0))) ((name imag-part) (type variable) (from ()) (levels (0))) ((name gcd) (type variable) (from ()) (levels (0))) ((name for-each) (type variable) (from ()) (levels (0))) ((name floor) (type variable) (from ()) (levels (0))) ((name expt) (type variable) (from ()) (levels (0))) ((name exp) (type variable) (from ()) (levels (0))) ((name exact?) (type variable) (from ()) (levels (0))) ((name even?) (type variable) (from ()) (levels (0))) ((name eqv?) (type variable) (from ()) (levels (0))) ((name equal?) (type variable) (from ()) (levels (0))) ((name eq?) (type variable) (from ()) (levels (0))) ((name dynamic-wind) (type variable) (from ()) (levels (0))) ((name denominator) (type variable) (from ()) (levels (0))) ((name cos) (type variable) (from ()) (levels (0))) ((name cons) (type variable) (from ()) (levels (0))) ((name complex?) (type variable) (from ()) (levels (0))) ((name char>=?) (type variable) (from ()) (levels (0))) ((name char<=?) (type variable) (from ()) (levels (0))) ((name char>?) (type variable) (from ()) (levels (0))) ((name char<?) (type variable) (from ()) (levels (0))) ((name char=?) (type variable) (from ()) (levels (0))) ((name char->integer) (type variable) (from ()) (levels (0))) ((name char?) (type variable) (from ()) (levels (0))) ((name ceiling) (type variable) (from ()) (levels (0))) ((name cddddr) (type variable) (from ()) (levels (0))) ((name cdddar) (type variable) (from ()) (levels (0))) ((name cddadr) (type variable) (from ()) (levels (0))) ((name cddaar) (type variable) (from ()) (levels (0))) ((name cdaddr) (type variable) (from ()) (levels (0))) ((name cdadar) (type variable) (from ()) (levels (0))) ((name cdaadr) (type variable) (from ()) (levels (0))) ((name cdaaar) (type variable) (from ()) (levels (0))) ((name cadddr) (type variable) (from ()) (levels (0))) ((name caddar) (type variable) (from ()) (levels (0))) ((name cadadr) (type variable) (from ()) (levels (0))) ((name cadaar) (type variable) (from ()) (levels (0))) ((name caaddr) (type variable) (from ()) (levels (0))) ((name caadar) (type variable) (from ()) (levels (0))) ((name caaadr) (type variable) (from ()) (levels (0))) ((name caaaar) (type variable) (from ()) (levels (0))) ((name cdddr) (type variable) (from ()) (levels (0))) ((name cddar) (type variable) (from ()) (levels (0))) ((name cdadr) (type variable) (from ()) (levels (0))) ((name cdaar) (type variable) (from ()) (levels (0))) ((name caddr) (type variable) (from ()) (levels (0))) ((name cadar) (type variable) (from ()) (levels (0))) ((name caadr) (type variable) (from ()) (levels (0))) ((name caaar) (type variable) (from ()) (levels (0))) ((name cddr) (type variable) (from ()) (levels (0))) ((name cdar) (type variable) (from ()) (levels (0))) ((name cadr) (type variable) (from ()) (levels (0))) ((name caar) (type variable) (from ()) (levels (0))) ((name cdr) (type variable) (from ()) (levels (0))) ((name car) (type variable) (from ()) (levels (0))) ((name call-with-values) (type variable) (from ()) (levels (0))) ((name call-with-current-continuation) (type variable) (from ()) (levels (0))) ((name boolean?) (type variable) (from ()) (levels (0))) ((name atan) (type variable) (from ()) (levels (0))) ((name asin) (type variable) (from ()) (levels (0))) ((name apply) (type variable) (from ()) (levels (0))) ((name append) (type variable) (from ()) (levels (0))) ((name acos) (type variable) (from ()) (levels (0))) ((name abs) (type variable) (from ()) (levels (0))) ((name >=) (type variable) (from ()) (levels (0))) ((name >) (type variable) (from ()) (levels (0))) ((name =) (type variable) (from ()) (levels (0))) ((name <=) (type variable) (from ()) (levels (0))) ((name <) (type variable) (from ()) (levels (0))) ((name /) (type variable) (from ()) (levels (0))) ((name -) (type variable) (from ()) (levels (0))) ((name +) (type variable) (from ()) (levels (0))) ((name *) (type variable) (from ()) (levels (0))) ((name identifier-syntax) (type macro) (from (core identifier-syntax)) (levels (1))) ((name syntax-rules) (type macro) (from (core syntax-rules)) (levels (1))) ((name unquote-splicing) (type macro) (from (core quasiquote)) (levels (0))) ((name unquote) (type macro) (from (core quasiquote)) (levels (0))) ((name quasiquote) (type macro) (from (core quasiquote)) (levels (0))) ((name assert) (type macro) (from (rnrs base)) (levels (0))) ((name =>) (type macro) (from (core derived)) (levels (0))) ((name else) (type macro) (from (core derived)) (levels (0))) ((name cond) (type macro) (from (core derived)) (levels (0))) ((name case) (type macro) (from (core derived)) (levels (0))) ((name let*-values) (type macro) (from (core let-values)) (levels (0))) ((name let-values) (type macro) (from (core let-values)) (levels (0))) ((name letrec*) (type macro) (from (core let)) (levels (0))) ((name letrec) (type macro) (from (core let)) (levels (0))) ((name let*) (type macro) (from (core derived)) (levels (0))) ((name let) (type macro) (from (core let)) (levels (0))) ((name ...) (type macro) (from ()) (levels (1))) ((name _) (type macro) (from ()) (levels (1))) ((name letrec-syntax) (type macro) (from ()) (levels (0))) ((name let-syntax) (type macro) (from ()) (levels (0))) ((name define-syntax) (type macro) (from ()) (levels (0))) ((name define) (type macro) (from ()) (levels (0))) ((name or) (type macro) (from ()) (levels (0))) ((name and) (type macro) (from ()) (levels (0))) ((name set!) (type macro) (from ()) (levels (1 0))) ((name quote) (type macro) (from ()) (levels (0))) ((name lambda) (type macro) (from ()) (levels (0))) ((name if) (type macro) (from ()) (levels (0))) ((name begin) (type macro) (from ()) (levels (0)))) ((rnrs bytevectors (6)) ((name utf32->string) (type variable) (from ()) (levels (0))) ((name utf16->string) (type variable) (from ()) (levels (0))) ((name utf8->string) (type variable) (from ()) (levels (0))) ((name string->utf32) (type variable) (from ()) (levels (0))) ((name string->utf16) (type variable) (from ()) (levels (0))) ((name string->utf8) (type variable) (from ()) (levels (0))) ((name bytevector-ieee-double-set!) (type variable) (from ()) (levels (0))) ((name bytevector-ieee-double-native-set!) (type variable) (from ()) (levels (0))) ((name bytevector-ieee-single-set!) (type variable) (from ()) (levels (0))) ((name bytevector-ieee-single-native-set!) (type variable) (from ()) (levels (0))) ((name bytevector-ieee-double-ref) (type variable) (from ()) (levels (0))) ((name bytevector-ieee-double-native-ref) (type variable) (from ()) (levels (0))) ((name bytevector-ieee-single-ref) (type variable) (from ()) (levels (0))) ((name bytevector-ieee-single-native-ref) (type variable) (from ()) (levels (0))) ((name bytevector-s64-native-set!) (type variable) (from ()) (levels (0))) ((name bytevector-u64-native-set!) (type variable) (from ()) (levels (0))) ((name bytevector-s64-set!) (type variable) (from ()) (levels (0))) ((name bytevector-u64-set!) (type variable) (from ()) (levels (0))) ((name bytevector-s64-native-ref) (type variable) (from ()) (levels (0))) ((name bytevector-u64-native-ref) (type variable) (from ()) (levels (0))) ((name bytevector-s64-ref) (type variable) (from ()) (levels (0))) ((name bytevector-u64-ref) (type variable) (from ()) (levels (0))) ((name bytevector-s32-native-set!) (type variable) (from ()) (levels (0))) ((name bytevector-u32-native-set!) (type variable) (from ()) (levels (0))) ((name bytevector-s32-set!) (type variable) (from ()) (levels (0))) ((name bytevector-u32-set!) (type variable) (from ()) (levels (0))) ((name bytevector-s32-native-ref) (type variable) (from ()) (levels (0))) ((name bytevector-u32-native-ref) (type variable) (from ()) (levels (0))) ((name bytevector-s32-ref) (type variable) (from ()) (levels (0))) ((name bytevector-u32-ref) (type variable) (from ()) (levels (0))) ((name bytevector-s16-native-set!) (type variable) (from ()) (levels (0))) ((name bytevector-u16-native-set!) (type variable) (from ()) (levels (0))) ((name bytevector-s16-set!) (type variable) (from ()) (levels (0))) ((name bytevector-u16-set!) (type variable) (from ()) (levels (0))) ((name bytevector-s16-native-ref) (type variable) (from ()) (levels (0))) ((name bytevector-u16-native-ref) (type variable) (from ()) (levels (0))) ((name bytevector-s16-ref) (type variable) (from ()) (levels (0))) ((name bytevector-u16-ref) (type variable) (from ()) (levels (0))) ((name sint-list->bytevector) (type variable) (from ()) (levels (0))) ((name uint-list->bytevector) (type variable) (from ()) (levels (0))) ((name bytevetor->sint-list) (type variable) (from ()) (levels (0))) ((name bytevetor->uint-list) (type variable) (from ()) (levels (0))) ((name bytevector-sint-set!) (type variable) (from ()) (levels (0))) ((name bytevector-uint-set!) (type variable) (from ()) (levels (0))) ((name bytevector-sint-ref) (type variable) (from ()) (levels (0))) ((name bytevector-uint-ref) (type variable) (from ()) (levels (0))) ((name u8-list->bytevector) (type variable) (from ()) (levels (0))) ((name bytevetor->u8-list) (type variable) (from ()) (levels (0))) ((name bytevector-s8-set!) (type variable) (from ()) (levels (0))) ((name bytevector-u8-set!) (type variable) (from ()) (levels (0))) ((name bytevector-s8-ref) (type variable) (from ()) (levels (0))) ((name bytevector-u8-ref) (type variable) (from ()) (levels (0))) ((name bytevector-copy) (type variable) (from ()) (levels (0))) ((name bytevector-copy!) (type variable) (from ()) (levels (0))) ((name bytevector-fill!) (type variable) (from ()) (levels (0))) ((name bytevector=?) (type variable) (from ()) (levels (0))) ((name bytevector-length) (type variable) (from ()) (levels (0))) ((name make-bytevector) (type variable) (from ()) (levels (0))) ((name bytevector?) (type variable) (from ()) (levels (0))) ((name native-endianness) (type variable) (from ()) (levels (0))) ((name endianness) (type macro) (from (rnrs bytevectors)) (levels (0)))) ((rnrs conditions (6)) ((name undefined-violation?) (type variable) (from ()) (levels (0))) ((name make-undefined-violation) (type variable) (from ()) (levels (0))) ((name &undefined) (type variable) (from ()) (levels (0))) ((name syntax-violation-subform) (type variable) (from ()) (levels (0))) ((name syntax-violation-form) (type variable) (from ()) (levels (0))) ((name syntax-violation?) (type variable) (from ()) (levels (0))) ((name make-syntax-violation) (type variable) (from ()) (levels (0))) ((name &syntax) (type variable) (from ()) (levels (0))) ((name lexical-violation?) (type variable) (from ()) (levels (0))) ((name make-lexical-violation) (type variable) (from ()) (levels (0))) ((name &lexical) (type variable) (from ()) (levels (0))) ((name implementation-restriction-violation?) (type variable) (from ()) (levels (0))) ((name make-implementation-restriction-violation) (type variable) (from ()) (levels (0))) ((name &implementation-restriction) (type variable) (from ()) (levels (0))) ((name non-continuable-violation?) (type variable) (from ()) (levels (0))) ((name make-non-continuable-violation) (type variable) (from ()) (levels (0))) ((name &non-continuable) (type variable) (from ()) (levels (0))) ((name condition-who) (type variable) (from ()) (levels (0))) ((name who-condition?) (type variable) (from ()) (levels (0))) ((name make-who-condition) (type variable) (from ()) (levels (0))) ((name &who) (type variable) (from ()) (levels (0))) ((name condition-irritants) (type variable) (from ()) (levels (0))) ((name irritants-condition?) (type variable) (from ()) (levels (0))) ((name make-irritants-condition) (type variable) (from ()) (levels (0))) ((name &irritants) (type variable) (from ()) (levels (0))) ((name assertion-violation?) (type variable) (from ()) (levels (0))) ((name make-assertion-violation) (type variable) (from ()) (levels (0))) ((name &assertion) (type variable) (from ()) (levels (0))) ((name violation?) (type variable) (from ()) (levels (0))) ((name make-violation) (type variable) (from ()) (levels (0))) ((name &violation) (type variable) (from ()) (levels (0))) ((name error?) (type variable) (from ()) (levels (0))) ((name make-error) (type variable) (from ()) (levels (0))) ((name &error) (type variable) (from ()) (levels (0))) ((name serious-condition?) (type variable) (from ()) (levels (0))) ((name make-serious-condition) (type variable) (from ()) (levels (0))) ((name &serious) (type variable) (from ()) (levels (0))) ((name warning?) (type variable) (from ()) (levels (0))) ((name make-warning) (type variable) (from ()) (levels (0))) ((name &warning) (type variable) (from ()) (levels (0))) ((name condition-message) (type variable) (from ()) (levels (0))) ((name message-condition?) (type variable) (from ()) (levels (0))) ((name make-message-condition) (type variable) (from ()) (levels (0))) ((name &message) (type variable) (from ()) (levels (0))) ((name define-condition-type) (type macro) (from (rnrs conditions)) (levels (0))) ((name condition-accessor) (type variable) (from ()) (levels (0))) ((name condition-predicate) (type variable) (from ()) (levels (0))) ((name condition?) (type variable) (from ()) (levels (0))) ((name simple-conditions) (type variable) (from ()) (levels (0))) ((name condition) (type variable) (from ()) (levels (0))) ((name &condition) (type variable) (from ()) (levels (0)))) ((rnrs control (6)) ((name case-lambda) (type macro) (from (rnrs control)) (levels (0))) ((name do) (type macro) (from (rnrs control)) (levels (0))) ((name unless) (type macro) (from (rnrs control)) (levels (0))) ((name when) (type macro) (from (rnrs control)) (levels (0)))) ((rnrs enums (6)) ((name define-enumeration) (type macro) (from (rnrs enums)) (levels (0))) ((name enum-set-projection) (type variable) (from ()) (levels (0))) ((name enum-set-complement) (type variable) (from ()) (levels (0))) ((name enum-set-difference) (type variable) (from ()) (levels (0))) ((name enum-set-intersection) (type variable) (from ()) (levels (0))) ((name enum-set-union) (type variable) (from ()) (levels (0))) ((name enum-set=?) (type variable) (from ()) (levels (0))) ((name enum-set-subset?) (type variable) (from ()) (levels (0))) ((name enum-set-member?) (type variable) (from ()) (levels (0))) ((name enum-set->list) (type variable) (from ()) (levels (0))) ((name enum-set-constructor) (type variable) (from ()) (levels (0))) ((name enum-set-indexer) (type variable) (from ()) (levels (0))) ((name enum-set-universe) (type variable) (from ()) (levels (0))) ((name make-enumeration) (type variable) (from ()) (levels (0)))) ((rnrs eval (6)) ((name environment) (type variable) (from ()) (levels (0))) ((name eval) (type variable) (from ()) (levels (0)))) ((rnrs exceptions (6)) ((name guard) (type macro) (from (rnrs exceptions)) (levels (0))) ((name raise-continuable) (type variable) (from ()) (levels (0))) ((name raise) (type variable) (from ()) (levels (0))) ((name with-exception-handler) (type variable) (from ()) (levels (0)))) ((rnrs files (6)) ((name delete-file) (type variable) (from ()) (levels (0))) ((name file-exists?) (type variable) (from ()) (levels (0)))) ((rnrs hashtables (6)) ((name symbol-hash) (type variable) (from ()) (levels (0))) ((name string-ci-hash) (type variable) (from ()) (levels (0))) ((name string-hash) (type variable) (from ()) (levels (0))) ((name equal-hash) (type variable) (from ()) (levels (0))) ((name hashtable-mutable?) (type variable) (from ()) (levels (0))) ((name hashtable-hash-function) (type variable) (from ()) (levels (0))) ((name hashtable-equivalence-function) (type variable) (from ()) (levels (0))) ((name hashtable-entries) (type variable) (from ()) (levels (0))) ((name hashtable-keys) (type variable) (from ()) (levels (0))) ((name hashtable-clear!) (type variable) (from ()) (levels (0))) ((name hashtable-copy) (type variable) (from ()) (levels (0))) ((name hashtable-update!) (type variable) (from ()) (levels (0))) ((name hashtable-contains?) (type variable) (from ()) (levels (0))) ((name hashtable-delete!) (type variable) (from ()) (levels (0))) ((name hashtable-set!) (type variable) (from ()) (levels (0))) ((name hashtable-ref) (type variable) (from ()) (levels (0))) ((name hashtable-size) (type variable) (from ()) (levels (0))) ((name hashtable?) (type variable) (from ()) (levels (0))) ((name make-hashtable) (type variable) (from (rnrs hashtables)) (levels (0))) ((name make-eqv-hashtable) (type variable) (from ()) (levels (0))) ((name make-eq-hashtable) (type variable) (from ()) (levels (0)))) ((rnrs io ports (6)) ((name make-custom-textual-input/output-port) (type variable) (from ()) (levels (0))) ((name make-custom-binary-input/output-port) (type variable) (from ()) (levels (0))) ((name open-file-input/output-port) (type variable) (from ()) (levels (0))) ((name put-datum) (type variable) (from ()) (levels (0))) ((name put-string) (type variable) (from ()) (levels (0))) ((name put-char) (type variable) (from ()) (levels (0))) ((name put-bytevector) (type variable) (from ()) (levels (0))) ((name put-u8) (type variable) (from ()) (levels (0))) ((name make-custom-textual-output-port) (type variable) (from ()) (levels (0))) ((name make-custom-binary-output-port) (type variable) (from ()) (levels (0))) ((name current-error-port) (type variable) (from ()) (levels (0))) ((name current-output-port) (type variable) (from ()) (levels (0))) ((name standard-output-port) (type variable) (from ()) (levels (0))) ((name call-with-string-output-port) (type variable) (from ()) (levels (0))) ((name call-with-bytevector-output-port) (type variable) (from ()) (levels (0))) ((name open-string-output-port) (type variable) (from ()) (levels (0))) ((name open-bytevector-output-port) (type variable) (from ()) (levels (0))) ((name open-file-output-port) (type variable) (from ()) (levels (0))) ((name output-port-buffer-mode) (type variable) (from ()) (levels (0))) ((name flush-output-port) (type variable) (from ()) (levels (0))) ((name output-port?) (type variable) (from ()) (levels (0))) ((name get-datum) (type variable) (from ()) (levels (0))) ((name get-line) (type variable) (from ()) (levels (0))) ((name get-string-all) (type variable) (from ()) (levels (0))) ((name get-string-n!) (type variable) (from ()) (levels (0))) ((name get-string-n) (type variable) (from ()) (levels (0))) ((name lookahead-char) (type variable) (from ()) (levels (0))) ((name get-char) (type variable) (from ()) (levels (0))) ((name get-bytevector-all) (type variable) (from ()) (levels (0))) ((name get-bytevector-some) (type variable) (from ()) (levels (0))) ((name get-bytevector-n!) (type variable) (from ()) (levels (0))) ((name get-bytevector-n) (type variable) (from ()) (levels (0))) ((name lookahead-u8) (type variable) (from ()) (levels (0))) ((name get-u8) (type variable) (from ()) (levels (0))) ((name make-custom-textual-input-port) (type variable) (from ()) (levels (0))) ((name make-custom-binary-input-port) (type variable) (from ()) (levels (0))) ((name current-input-port) (type variable) (from ()) (levels (0))) ((name standard-input-port) (type variable) (from ()) (levels (0))) ((name open-string-input-port) (type variable) (from ()) (levels (0))) ((name open-bytevector-input-port) (type variable) (from ()) (levels (0))) ((name open-file-input-port) (type variable) (from ()) (levels (0))) ((name port-eof?) (type variable) (from ()) (levels (0))) ((name input-port?) (type variable) (from ()) (levels (0))) ((name call-with-port) (type variable) (from ()) (levels (0))) ((name close-port) (type variable) (from ()) (levels (0))) ((name set-port-position!) (type variable) (from ()) (levels (0))) ((name port-has-set-port-position!?) (type variable) (from ()) (levels (0))) ((name port-position) (type variable) (from ()) (levels (0))) ((name port-has-port-position?) (type variable) (from ()) (levels (0))) ((name transcoded-port) (type variable) (from ()) (levels (0))) ((name binary-port?) (type variable) (from ()) (levels (0))) ((name textual-port?) (type variable) (from ()) (levels (0))) ((name port-transcoder) (type variable) (from ()) (levels (0))) ((name port?) (type variable) (from ()) (levels (0))) ((name eof-object?) (type variable) (from ()) (levels (0))) ((name eof-object) (type variable) (from ()) (levels (0))) ((name string->bytevector) (type variable) (from ()) (levels (0))) ((name bytevector->string) (type variable) (from ()) (levels (0))) ((name transcoder-error-handling-mode) (type variable) (from ()) (levels (0))) ((name transcoder-eol-style) (type variable) (from ()) (levels (0))) ((name transcoder-codec) (type variable) (from ()) (levels (0))) ((name native-transcoder) (type variable) (from ()) (levels (0))) ((name make-transcoder) (type variable) (from ()) (levels (0))) ((name error-handling-mode) (type macro) (from (rnrs io ports)) (levels (0))) ((name i/o-encoding-error-char) (type variable) (from ()) (levels (0))) ((name i/o-encoding-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-encoding-error) (type variable) (from ()) (levels (0))) ((name &i/o-encoding) (type variable) (from ()) (levels (0))) ((name i/o-decoding-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-decoding-error) (type variable) (from ()) (levels (0))) ((name &i/o-decoding) (type variable) (from ()) (levels (0))) ((name native-eol-style) (type variable) (from ()) (levels (0))) ((name eol-style) (type macro) (from (rnrs io ports)) (levels (0))) ((name utf-16-codec) (type variable) (from ()) (levels (0))) ((name utf-8-codec) (type variable) (from ()) (levels (0))) ((name latin-1-codec) (type variable) (from ()) (levels (0))) ((name buffer-mode?) (type variable) (from ()) (levels (0))) ((name buffer-mode) (type macro) (from (rnrs io ports)) (levels (0))) ((name no-truncate) (type variable) (from ()) (levels (0))) ((name no-fail) (type variable) (from ()) (levels (0))) ((name no-create) (type variable) (from ()) (levels (0))) ((name file-options) (type variable) (from ()) (levels (0))) ((name i/o-error-port) (type variable) (from ()) (levels (0))) ((name i/o-port-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-port-error) (type variable) (from ()) (levels (0))) ((name &i/o-port) (type variable) (from ()) (levels (0))) ((name i/o-file-does-not-exist-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-file-does-not-exist-error) (type variable) (from ()) (levels (0))) ((name &i/o-file-does-not-exist) (type variable) (from ()) (levels (0))) ((name i/o-file-already-exists-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-file-already-exists-error) (type variable) (from ()) (levels (0))) ((name &i/o-file-already-exists) (type variable) (from ()) (levels (0))) ((name i/o-file-is-read-only-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-file-is-read-only-error) (type variable) (from ()) (levels (0))) ((name &i/o-file-is-read-only) (type variable) (from ()) (levels (0))) ((name i/o-file-protection-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-file-protection-error) (type variable) (from ()) (levels (0))) ((name &i/o-file-protection) (type variable) (from ()) (levels (0))) ((name i/o-error-filename) (type variable) (from ()) (levels (0))) ((name i/o-filename-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-filename-error) (type variable) (from ()) (levels (0))) ((name &i/o-filename) (type variable) (from ()) (levels (0))) ((name i/o-error-position) (type variable) (from ()) (levels (0))) ((name i/o-invalid-position-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-invalid-position-error) (type variable) (from ()) (levels (0))) ((name &i/o-invalid-position) (type variable) (from ()) (levels (0))) ((name i/o-write-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-write-error) (type variable) (from ()) (levels (0))) ((name &i/o-write) (type variable) (from ()) (levels (0))) ((name i/o-read-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-read-error) (type variable) (from ()) (levels (0))) ((name &i/o-read) (type variable) (from ()) (levels (0))) ((name i/o-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-error) (type variable) (from ()) (levels (0))) ((name &i/o) (type variable) (from ()) (levels (0)))) ((rnrs io simple (6)) ((name write) (type variable) (from ()) (levels (0))) ((name display) (type variable) (from ()) (levels (0))) ((name newline) (type variable) (from ()) (levels (0))) ((name write-char) (type variable) (from ()) (levels (0))) ((name read) (type variable) (from ()) (levels (0))) ((name peek-char) (type variable) (from ()) (levels (0))) ((name read-char) (type variable) (from ()) (levels (0))) ((name close-output-port) (type variable) (from ()) (levels (0))) ((name close-input-port) (type variable) (from ()) (levels (0))) ((name open-output-file) (type variable) (from ()) (levels (0))) ((name open-input-file) (type variable) (from ()) (levels (0))) ((name with-output-to-file) (type variable) (from ()) (levels (0))) ((name with-input-from-file) (type variable) (from ()) (levels (0))) ((name current-error-port) (type variable) (from ()) (levels (0))) ((name current-output-port) (type variable) (from ()) (levels (0))) ((name current-input-port) (type variable) (from ()) (levels (0))) ((name output-port?) (type variable) (from ()) (levels (0))) ((name input-port?) (type variable) (from ()) (levels (0))) ((name call-with-output-file) (type variable) (from ()) (levels (0))) ((name call-with-input-file) (type variable) (from ()) (levels (0))) ((name eof-object?) (type variable) (from ()) (levels (0))) ((name eof-object) (type variable) (from ()) (levels (0))) ((name i/o-error-port) (type variable) (from ()) (levels (0))) ((name i/o-port-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-port-error) (type variable) (from ()) (levels (0))) ((name &i/o-port) (type variable) (from ()) (levels (0))) ((name i/o-file-does-not-exist-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-file-does-not-exist-error) (type variable) (from ()) (levels (0))) ((name &i/o-file-does-not-exist) (type variable) (from ()) (levels (0))) ((name i/o-file-already-exists-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-file-already-exists-error) (type variable) (from ()) (levels (0))) ((name &i/o-file-already-exists) (type variable) (from ()) (levels (0))) ((name i/o-file-is-read-only-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-file-is-read-only-error) (type variable) (from ()) (levels (0))) ((name &i/o-file-is-read-only) (type variable) (from ()) (levels (0))) ((name i/o-file-protection-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-file-protection-error) (type variable) (from ()) (levels (0))) ((name &i/o-file-protection) (type variable) (from ()) (levels (0))) ((name i/o-error-filename) (type variable) (from ()) (levels (0))) ((name i/o-filename-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-filename-error) (type variable) (from ()) (levels (0))) ((name &i/o-filename) (type variable) (from ()) (levels (0))) ((name i/o-error-position) (type variable) (from ()) (levels (0))) ((name i/o-invalid-position-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-invalid-position-error) (type variable) (from ()) (levels (0))) ((name &i/o-invalid-position) (type variable) (from ()) (levels (0))) ((name i/o-write-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-write-error) (type variable) (from ()) (levels (0))) ((name &i/o-write) (type variable) (from ()) (levels (0))) ((name i/o-read-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-read-error) (type variable) (from ()) (levels (0))) ((name &i/o-read) (type variable) (from ()) (levels (0))) ((name i/o-error?) (type variable) (from ()) (levels (0))) ((name make-i/o-error) (type variable) (from ()) (levels (0))) ((name &i/o) (type variable) (from ()) (levels (0)))) ((rnrs lists (6)) ((name assq) (type variable) (from ()) (levels (0))) ((name assv) (type variable) (from ()) (levels (0))) ((name assoc) (type variable) (from ()) (levels (0))) ((name assp) (type variable) (from ()) (levels (0))) ((name memq) (type variable) (from ()) (levels (0))) ((name memv) (type variable) (from ()) (levels (0))) ((name member) (type variable) (from ()) (levels (0))) ((name memp) (type variable) (from ()) (levels (0))) ((name remv) (type variable) (from ()) (levels (0))) ((name remq) (type variable) (from ()) (levels (0))) ((name remove) (type variable) (from ()) (levels (0))) ((name remp) (type variable) (from ()) (levels (0))) ((name fold-right) (type variable) (from ()) (levels (0))) ((name fold-left) (type variable) (from ()) (levels (0))) ((name partition) (type variable) (from ()) (levels (0))) ((name filter) (type variable) (from ()) (levels (0))) ((name exists) (type variable) (from ()) (levels (0))) ((name for-all) (type variable) (from ()) (levels (0))) ((name find) (type variable) (from ()) (levels (0)))) ((rnrs mutable-pairs (6)) ((name set-cdr!) (type variable) (from ()) (levels (0))) ((name set-car!) (type variable) (from ()) (levels (0)))) ((rnrs mutable-strings (6)) ((name string-fill!) (type variable) (from ()) (levels (0))) ((name string-set!) (type variable) (from ()) (levels (0)))) ((rnrs programs (6)) ((name exit) (type variable) (from ()) (levels (0))) ((name command-line) (type variable) (from (rnrs programs)) (levels (0)))) ((rnrs r5rs (6)) ((name modulo) (type variable) (from ()) (levels (0))) ((name remainder) (type variable) (from ()) (levels (0))) ((name quotient) (type variable) (from ()) (levels (0))) ((name inexact->exact) (type variable) (from ()) (levels (0))) ((name exact->inexact) (type variable) (from ()) (levels (0))) ((name force) (type variable) (from (rnrs r5rs)) (levels (0))) ((name delay) (type macro) (from (rnrs r5rs)) (levels (0))) ((name scheme-report-environment) (type variable) (from (rnrs r5rs)) (levels (0))) ((name null-environment) (type variable) (from (rnrs r5rs)) (levels (0)))) ((rnrs records inspection (6)) ((name record-field-mutable?) (type variable) (from ()) (levels (0))) ((name record-type-field-names) (type variable) (from ()) (levels (0))) ((name record-type-opaque?) (type variable) (from ()) (levels (0))) ((name record-type-sealed?) (type variable) (from ()) (levels (0))) ((name record-type-generative?) (type variable) (from ()) (levels (0))) ((name record-type-uid) (type variable) (from ()) (levels (0))) ((name record-type-parent) (type variable) (from ()) (levels (0))) ((name record-type-name) (type variable) (from ()) (levels (0))) ((name record-rtd) (type variable) (from ()) (levels (0))) ((name record?) (type variable) (from ()) (levels (0)))) ((rnrs records procedural (6)) ((name record-mutator) (type variable) (from ()) (levels (0))) ((name record-accessor) (type variable) (from ()) (levels (0))) ((name record-predicate) (type variable) (from ()) (levels (0))) ((name record-constructor) (type variable) (from ()) (levels (0))) ((name make-record-constructor-descriptor) (type variable) (from ()) (levels (0))) ((name record-type-descriptor?) (type variable) (from ()) (levels (0))) ((name make-record-type-descriptor) (type variable) (from ()) (levels (0)))) ((rnrs records syntactic (6)) ((name define-record-type) (type macro) (from (rnrs records syntactic)) (levels (0)))) ((rnrs sorting (6)) ((name vector-sort!) (type variable) (from ()) (levels (0))) ((name vector-sort) (type variable) (from ()) (levels (0))) ((name list-sort) (type variable) (from ()) (levels (0)))) ((rnrs syntax-case (6)) ((name ...) (type macro) (from ()) (levels (0))) ((name _) (type macro) (from ()) (levels (0))) ((name with-syntax) (type macro) (from (core with-syntax)) (levels (0))) ((name unsyntax-splicing) (type macro) (from (core quasisyntax)) (levels (0))) ((name unsyntax) (type macro) (from (core quasisyntax)) (levels (0))) ((name quasisyntax) (type macro) (from (core quasisyntax)) (levels (0))) ((name syntax-case) (type macro) (from ()) (levels (0))) ((name syntax) (type macro) (from ()) (levels (0))) ((name syntax-violation) (type variable) (from ()) (levels (0))) ((name syntax->datum) (type variable) (from ()) (levels (0))) ((name datum->syntax) (type variable) (from ()) (levels (0))) ((name generate-temporaries) (type variable) (from ()) (levels (0))) ((name free-identifier=?) (type variable) (from ()) (levels (0))) ((name bound-identifier=?) (type variable) (from ()) (levels (0))) ((name identifier?) (type variable) (from ()) (levels (0))) ((name make-variable-transformer) (type variable) (from ()) (levels (0)))) ((rnrs unicode (6)) ((name string-normalize-nfkc) (type variable) (from ()) (levels (0))) ((name string-normalize-nfc) (type variable) (from ()) (levels (0))) ((name string-normalize-nfkd) (type variable) (from ()) (levels (0))) ((name string-normalize-nfd) (type variable) (from ()) (levels (0))) ((name string-ci>=?) (type variable) (from ()) (levels (0))) ((name string-ci<=?) (type variable) (from ()) (levels (0))) ((name string-ci>?) (type variable) (from ()) (levels (0))) ((name string-ci<?) (type variable) (from ()) (levels (0))) ((name string-ci=?) (type variable) (from ()) (levels (0))) ((name string-foldcase) (type variable) (from ()) (levels (0))) ((name string-titlecase) (type variable) (from ()) (levels (0))) ((name string-downcase) (type variable) (from ()) (levels (0))) ((name string-upcase) (type variable) (from ()) (levels (0))) ((name char-general-category) (type variable) (from ()) (levels (0))) ((name char-title-case?) (type variable) (from ()) (levels (0))) ((name char-lower-case?) (type variable) (from ()) (levels (0))) ((name char-upper-case?) (type variable) (from ()) (levels (0))) ((name char-whitespace?) (type variable) (from ()) (levels (0))) ((name char-numeric?) (type variable) (from ()) (levels (0))) ((name char-alphabetic?) (type variable) (from ()) (levels (0))) ((name char-ci>=?) (type variable) (from ()) (levels (0))) ((name char-ci<=?) (type variable) (from ()) (levels (0))) ((name char-ci>?) (type variable) (from ()) (levels (0))) ((name char-ci<?) (type variable) (from ()) (levels (0))) ((name char-ci=?) (type variable) (from ()) (levels (0))) ((name char-foldcase) (type variable) (from ()) (levels (0))) ((name char-titlecase) (type variable) (from ()) (levels (0))) ((name char-downcase) (type variable) (from ()) (levels (0))) ((name char-upcase) (type variable) (from ()) (levels (0)))) ((rnrs (6)) ((name define-enumeration) (type macro) (from (rnrs enums)) (levels (0 1))) ((name enum-set-projection) (type variable) (from ()) (levels (0 1))) ((name enum-set-complement) (type variable) (from ()) (levels (0 1))) ((name enum-set-difference) (type variable) (from ()) (levels (0 1))) ((name enum-set-intersection) (type variable) (from ()) (levels (0 1))) ((name enum-set-union) (type variable) (from ()) (levels (0 1))) ((name enum-set=?) (type variable) (from ()) (levels (0 1))) ((name enum-set-subset?) (type variable) (from ()) (levels (0 1))) ((name enum-set-member?) (type variable) (from ()) (levels (0 1))) ((name enum-set->list) (type variable) (from ()) (levels (0 1))) ((name enum-set-constructor) (type variable) (from ()) (levels (0 1))) ((name enum-set-indexer) (type variable) (from ()) (levels (0 1))) ((name enum-set-universe) (type variable) (from ()) (levels (0 1))) ((name make-enumeration) (type variable) (from ()) (levels (0 1))) ((name symbol-hash) (type variable) (from ()) (levels (0 1))) ((name string-ci-hash) (type variable) (from ()) (levels (0 1))) ((name string-hash) (type variable) (from ()) (levels (0 1))) ((name equal-hash) (type variable) (from ()) (levels (0 1))) ((name hashtable-mutable?) (type variable) (from ()) (levels (0 1))) ((name hashtable-hash-function) (type variable) (from ()) (levels (0 1))) ((name hashtable-equivalence-function) (type variable) (from ()) (levels (0 1))) ((name hashtable-entries) (type variable) (from ()) (levels (0 1))) ((name hashtable-keys) (type variable) (from ()) (levels (0 1))) ((name hashtable-clear!) (type variable) (from ()) (levels (0 1))) ((name hashtable-copy) (type variable) (from ()) (levels (0 1))) ((name hashtable-update!) (type variable) (from ()) (levels (0 1))) ((name hashtable-contains?) (type variable) (from ()) (levels (0 1))) ((name hashtable-delete!) (type variable) (from ()) (levels (0 1))) ((name hashtable-set!) (type variable) (from ()) (levels (0 1))) ((name hashtable-ref) (type variable) (from ()) (levels (0 1))) ((name hashtable-size) (type variable) (from ()) (levels (0 1))) ((name hashtable?) (type variable) (from ()) (levels (0 1))) ((name make-hashtable) (type variable) (from (rnrs hashtables)) (levels (0 1))) ((name make-eqv-hashtable) (type variable) (from ()) (levels (0 1))) ((name make-eq-hashtable) (type variable) (from ()) (levels (0 1))) ((name with-syntax) (type macro) (from (core with-syntax)) (levels (0 1))) ((name unsyntax-splicing) (type macro) (from (core quasisyntax)) (levels (0 1))) ((name unsyntax) (type macro) (from (core quasisyntax)) (levels (0 1))) ((name quasisyntax) (type macro) (from (core quasisyntax)) (levels (0 1))) ((name syntax-case) (type macro) (from ()) (levels (0 1))) ((name syntax) (type macro) (from ()) (levels (0 1))) ((name syntax-violation) (type variable) (from ()) (levels (0 1))) ((name syntax->datum) (type variable) (from ()) (levels (0 1))) ((name datum->syntax) (type variable) (from ()) (levels (0 1))) ((name generate-temporaries) (type variable) (from ()) (levels (0 1))) ((name free-identifier=?) (type variable) (from ()) (levels (0 1))) ((name bound-identifier=?) (type variable) (from ()) (levels (0 1))) ((name identifier?) (type variable) (from ()) (levels (0 1))) ((name make-variable-transformer) (type variable) (from ()) (levels (0 1))) ((name bitwise-arithmetic-shift-right) (type variable) (from ()) (levels (0 1))) ((name bitwise-arithmetic-shift-left) (type variable) (from ()) (levels (0 1))) ((name bitwise-arithmetic-shift) (type variable) (from ()) (levels (0 1))) ((name bitwise-reverse-bit-field) (type variable) (from ()) (levels (0 1))) ((name bitwise-rotate-bit-field) (type variable) (from ()) (levels (0 1))) ((name bitwise-copy-bit-field) (type variable) (from ()) (levels (0 1))) ((name bitwise-bit-field) (type variable) (from ()) (levels (0 1))) ((name bitwise-copy-bit) (type variable) (from ()) (levels (0 1))) ((name bitwise-bit-set?) (type variable) (from ()) (levels (0 1))) ((name bitwise-first-bit-set) (type variable) (from ()) (levels (0 1))) ((name bitwise-length) (type variable) (from ()) (levels (0 1))) ((name bitwise-bit-count) (type variable) (from ()) (levels (0 1))) ((name bitwise-if) (type variable) (from ()) (levels (0 1))) ((name bitwise-xor) (type variable) (from ()) (levels (0 1))) ((name bitwise-ior) (type variable) (from ()) (levels (0 1))) ((name bitwise-and) (type variable) (from ()) (levels (0 1))) ((name bitwise-not) (type variable) (from ()) (levels (0 1))) ((name no-nans-violation?) (type variable) (from ()) (levels (0 1))) ((name make-no-nans-violation) (type variable) (from ()) (levels (0 1))) ((name &no-nans) (type variable) (from ()) (levels (0 1))) ((name no-infinities-violation?) (type variable) (from ()) (levels (0 1))) ((name make-no-infinities-violation) (type variable) (from ()) (levels (0 1))) ((name &no-infinities) (type variable) (from ()) (levels (0 1))) ((name fixnum->flonum) (type variable) (from ()) (levels (0 1))) ((name flexpt) (type variable) (from ()) (levels (0 1))) ((name flsqrt) (type variable) (from ()) (levels (0 1))) ((name flatan) (type variable) (from ()) (levels (0 1))) ((name flacos) (type variable) (from ()) (levels (0 1))) ((name flasin) (type variable) (from ()) (levels (0 1))) ((name fltan) (type variable) (from ()) (levels (0 1))) ((name flcos) (type variable) (from ()) (levels (0 1))) ((name flsin) (type variable) (from ()) (levels (0 1))) ((name fllog) (type variable) (from ()) (levels (0 1))) ((name flexp) (type variable) (from ()) (levels (0 1))) ((name flround) (type variable) (from ()) (levels (0 1))) ((name fltruncate) (type variable) (from ()) (levels (0 1))) ((name flceiling) (type variable) (from ()) (levels (0 1))) ((name flfloor) (type variable) (from ()) (levels (0 1))) ((name fldenominator) (type variable) (from ()) (levels (0 1))) ((name flnumerator) (type variable) (from ()) (levels (0 1))) ((name flmod0) (type variable) (from ()) (levels (0 1))) ((name fldiv0) (type variable) (from ()) (levels (0 1))) ((name fldiv0-and-mod0) (type variable) (from ()) (levels (0 1))) ((name flmod) (type variable) (from ()) (levels (0 1))) ((name fldiv) (type variable) (from ()) (levels (0 1))) ((name fldiv-and-mod) (type variable) (from ()) (levels (0 1))) ((name flabs) (type variable) (from ()) (levels (0 1))) ((name fl/) (type variable) (from ()) (levels (0 1))) ((name fl-) (type variable) (from ()) (levels (0 1))) ((name fl*) (type variable) (from ()) (levels (0 1))) ((name fl+) (type variable) (from ()) (levels (0 1))) ((name flmin) (type variable) (from ()) (levels (0 1))) ((name flmax) (type variable) (from ()) (levels (0 1))) ((name flnan?) (type variable) (from ()) (levels (0 1))) ((name flinfinite?) (type variable) (from ()) (levels (0 1))) ((name flfinite?) (type variable) (from ()) (levels (0 1))) ((name fleven?) (type variable) (from ()) (levels (0 1))) ((name flodd?) (type variable) (from ()) (levels (0 1))) ((name flnegative?) (type variable) (from ()) (levels (0 1))) ((name flpositive?) (type variable) (from ()) (levels (0 1))) ((name flzero?) (type variable) (from ()) (levels (0 1))) ((name flinteger?) (type variable) (from ()) (levels (0 1))) ((name fl>=?) (type variable) (from ()) (levels (0 1))) ((name fl<=?) (type variable) (from ()) (levels (0 1))) ((name fl>?) (type variable) (from ()) (levels (0 1))) ((name fl<?) (type variable) (from ()) (levels (0 1))) ((name fl=?) (type variable) (from ()) (levels (0 1))) ((name real->flonum) (type variable) (from ()) (levels (0 1))) ((name flonum?) (type variable) (from ()) (levels (0 1))) ((name fxarithmetic-shift-right) (type variable) (from ()) (levels (0 1))) ((name fxarithmetic-shift-left) (type variable) (from ()) (levels (0 1))) ((name fxarithmetic-shift) (type variable) (from ()) (levels (0 1))) ((name fxreverse-bit-field) (type variable) (from ()) (levels (0 1))) ((name fxrotate-bit-field) (type variable) (from ()) (levels (0 1))) ((name fxcopy-bit-field) (type variable) (from ()) (levels (0 1))) ((name fxbit-field) (type variable) (from ()) (levels (0 1))) ((name fxcopy-bit) (type variable) (from ()) (levels (0 1))) ((name fxbit-set?) (type variable) (from ()) (levels (0 1))) ((name fxfirst-bit-set) (type variable) (from ()) (levels (0 1))) ((name fxlength) (type variable) (from ()) (levels (0 1))) ((name fxbit-count) (type variable) (from ()) (levels (0 1))) ((name fxif) (type variable) (from ()) (levels (0 1))) ((name fxxor) (type variable) (from ()) (levels (0 1))) ((name fxior) (type variable) (from ()) (levels (0 1))) ((name fxand) (type variable) (from ()) (levels (0 1))) ((name fxnot) (type variable) (from ()) (levels (0 1))) ((name fx*/carry) (type variable) (from ()) (levels (0 1))) ((name fx-/carry) (type variable) (from ()) (levels (0 1))) ((name fx+/carry) (type variable) (from ()) (levels (0 1))) ((name fxmod0) (type variable) (from ()) (levels (0 1))) ((name fxdiv0) (type variable) (from ()) (levels (0 1))) ((name fxdiv0-and-mod0) (type variable) (from ()) (levels (0 1))) ((name fxmod) (type variable) (from ()) (levels (0 1))) ((name fxdiv) (type variable) (from ()) (levels (0 1))) ((name fxdiv-and-mod) (type variable) (from ()) (levels (0 1))) ((name fx*) (type variable) (from ()) (levels (0 1))) ((name fx-) (type variable) (from ()) (levels (0 1))) ((name fx+) (type variable) (from ()) (levels (0 1))) ((name fxmin) (type variable) (from ()) (levels (0 1))) ((name fxmax) (type variable) (from ()) (levels (0 1))) ((name fxeven?) (type variable) (from ()) (levels (0 1))) ((name fxodd?) (type variable) (from ()) (levels (0 1))) ((name fxnegative?) (type variable) (from ()) (levels (0 1))) ((name fxpositive?) (type variable) (from ()) (levels (0 1))) ((name fxzero?) (type variable) (from ()) (levels (0 1))) ((name fx<=?) (type variable) (from ()) (levels (0 1))) ((name fx>=?) (type variable) (from ()) (levels (0 1))) ((name fx<?) (type variable) (from ()) (levels (0 1))) ((name fx>?) (type variable) (from ()) (levels (0 1))) ((name fx=?) (type variable) (from ()) (levels (0 1))) ((name greatest-fixnum) (type variable) (from ()) (levels (0 1))) ((name least-fixnum) (type variable) (from ()) (levels (0 1))) ((name fixnum-width) (type variable) (from ()) (levels (0 1))) ((name fixnum?) (type variable) (from ()) (levels (0 1))) ((name exit) (type variable) (from ()) (levels (0 1))) ((name command-line) (type variable) (from (rnrs programs)) (levels (0 1))) ((name delete-file) (type variable) (from ()) (levels (0 1))) ((name file-exists?) (type variable) (from ()) (levels (0 1))) ((name write-char) (type variable) (from ()) (levels (0 1))) ((name write) (type variable) (from ()) (levels (0 1))) ((name with-output-to-file) (type variable) (from ()) (levels (0 1))) ((name with-input-from-file) (type variable) (from ()) (levels (0 1))) ((name read-char) (type variable) (from ()) (levels (0 1))) ((name read) (type variable) (from ()) (levels (0 1))) ((name peek-char) (type variable) (from ()) (levels (0 1))) ((name open-output-file) (type variable) (from ()) (levels (0 1))) ((name open-input-file) (type variable) (from ()) (levels (0 1))) ((name newline) (type variable) (from ()) (levels (0 1))) ((name eof-object?) (type variable) (from ()) (levels (0 1))) ((name display) (type variable) (from ()) (levels (0 1))) ((name current-output-port) (type variable) (from ()) (levels (0 1))) ((name current-input-port) (type variable) (from ()) (levels (0 1))) ((name close-output-port) (type variable) (from ()) (levels (0 1))) ((name close-input-port) (type variable) (from ()) (levels (0 1))) ((name call-with-output-file) (type variable) (from ()) (levels (0 1))) ((name call-with-input-file) (type variable) (from ()) (levels (0 1))) ((name make-custom-textual-input/output-port) (type variable) (from ()) (levels (0 1))) ((name make-custom-binary-input/output-port) (type variable) (from ()) (levels (0 1))) ((name open-file-input/output-port) (type variable) (from ()) (levels (0 1))) ((name put-datum) (type variable) (from ()) (levels (0 1))) ((name put-string) (type variable) (from ()) (levels (0 1))) ((name put-char) (type variable) (from ()) (levels (0 1))) ((name put-bytevector) (type variable) (from ()) (levels (0 1))) ((name put-u8) (type variable) (from ()) (levels (0 1))) ((name make-custom-textual-output-port) (type variable) (from ()) (levels (0 1))) ((name make-custom-binary-output-port) (type variable) (from ()) (levels (0 1))) ((name current-error-port) (type variable) (from ()) (levels (0 1))) ((name standard-output-port) (type variable) (from ()) (levels (0 1))) ((name call-with-string-output-port) (type variable) (from ()) (levels (0 1))) ((name call-with-bytevector-output-port) (type variable) (from ()) (levels (0 1))) ((name open-string-output-port) (type variable) (from ()) (levels (0 1))) ((name open-bytevector-output-port) (type variable) (from ()) (levels (0 1))) ((name open-file-output-port) (type variable) (from ()) (levels (0 1))) ((name output-port-buffer-mode) (type variable) (from ()) (levels (0 1))) ((name flush-output-port) (type variable) (from ()) (levels (0 1))) ((name output-port?) (type variable) (from ()) (levels (0 1))) ((name get-datum) (type variable) (from ()) (levels (0 1))) ((name get-line) (type variable) (from ()) (levels (0 1))) ((name get-string-all) (type variable) (from ()) (levels (0 1))) ((name get-string-n!) (type variable) (from ()) (levels (0 1))) ((name get-string-n) (type variable) (from ()) (levels (0 1))) ((name lookahead-char) (type variable) (from ()) (levels (0 1))) ((name get-char) (type variable) (from ()) (levels (0 1))) ((name get-bytevector-all) (type variable) (from ()) (levels (0 1))) ((name get-bytevector-some) (type variable) (from ()) (levels (0 1))) ((name get-bytevector-n!) (type variable) (from ()) (levels (0 1))) ((name get-bytevector-n) (type variable) (from ()) (levels (0 1))) ((name lookahead-u8) (type variable) (from ()) (levels (0 1))) ((name get-u8) (type variable) (from ()) (levels (0 1))) ((name make-custom-textual-input-port) (type variable) (from ()) (levels (0 1))) ((name make-custom-binary-input-port) (type variable) (from ()) (levels (0 1))) ((name standard-input-port) (type variable) (from ()) (levels (0 1))) ((name open-string-input-port) (type variable) (from ()) (levels (0 1))) ((name open-bytevector-input-port) (type variable) (from ()) (levels (0 1))) ((name open-file-input-port) (type variable) (from ()) (levels (0 1))) ((name port-eof?) (type variable) (from ()) (levels (0 1))) ((name input-port?) (type variable) (from ()) (levels (0 1))) ((name call-with-port) (type variable) (from ()) (levels (0 1))) ((name close-port) (type variable) (from ()) (levels (0 1))) ((name set-port-position!) (type variable) (from ()) (levels (0 1))) ((name port-has-set-port-position!?) (type variable) (from ()) (levels (0 1))) ((name port-position) (type variable) (from ()) (levels (0 1))) ((name port-has-port-position?) (type variable) (from ()) (levels (0 1))) ((name transcoded-port) (type variable) (from ()) (levels (0 1))) ((name binary-port?) (type variable) (from ()) (levels (0 1))) ((name textual-port?) (type variable) (from ()) (levels (0 1))) ((name port-transcoder) (type variable) (from ()) (levels (0 1))) ((name port?) (type variable) (from ()) (levels (0 1))) ((name eof-object) (type variable) (from ()) (levels (0 1))) ((name string->bytevector) (type variable) (from ()) (levels (0 1))) ((name bytevector->string) (type variable) (from ()) (levels (0 1))) ((name transcoder-error-handling-mode) (type variable) (from ()) (levels (0 1))) ((name transcoder-eol-style) (type variable) (from ()) (levels (0 1))) ((name transcoder-codec) (type variable) (from ()) (levels (0 1))) ((name native-transcoder) (type variable) (from ()) (levels (0 1))) ((name make-transcoder) (type variable) (from ()) (levels (0 1))) ((name error-handling-mode) (type macro) (from (rnrs io ports)) (levels (0 1))) ((name i/o-encoding-error-char) (type variable) (from ()) (levels (0 1))) ((name i/o-encoding-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-encoding-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-encoding) (type variable) (from ()) (levels (0 1))) ((name i/o-decoding-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-decoding-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-decoding) (type variable) (from ()) (levels (0 1))) ((name native-eol-style) (type variable) (from ()) (levels (0 1))) ((name eol-style) (type macro) (from (rnrs io ports)) (levels (0 1))) ((name utf-16-codec) (type variable) (from ()) (levels (0 1))) ((name utf-8-codec) (type variable) (from ()) (levels (0 1))) ((name latin-1-codec) (type variable) (from ()) (levels (0 1))) ((name buffer-mode?) (type variable) (from ()) (levels (0 1))) ((name buffer-mode) (type macro) (from (rnrs io ports)) (levels (0 1))) ((name file-options) (type variable) (from ()) (levels (0 1))) ((name i/o-error-port) (type variable) (from ()) (levels (0 1))) ((name i/o-port-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-port-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-port) (type variable) (from ()) (levels (0 1))) ((name i/o-file-does-not-exist-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-file-does-not-exist-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-file-does-not-exist) (type variable) (from ()) (levels (0 1))) ((name i/o-file-already-exists-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-file-already-exists-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-file-already-exists) (type variable) (from ()) (levels (0 1))) ((name i/o-file-is-read-only-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-file-is-read-only-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-file-is-read-only) (type variable) (from ()) (levels (0 1))) ((name i/o-file-protection-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-file-protection-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-file-protection) (type variable) (from ()) (levels (0 1))) ((name i/o-error-filename) (type variable) (from ()) (levels (0 1))) ((name i/o-filename-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-filename-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-filename) (type variable) (from ()) (levels (0 1))) ((name i/o-error-position) (type variable) (from ()) (levels (0 1))) ((name i/o-invalid-position-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-invalid-position-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-invalid-position) (type variable) (from ()) (levels (0 1))) ((name i/o-write-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-write-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-write) (type variable) (from ()) (levels (0 1))) ((name i/o-read-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-read-error) (type variable) (from ()) (levels (0 1))) ((name &i/o-read) (type variable) (from ()) (levels (0 1))) ((name i/o-error?) (type variable) (from ()) (levels (0 1))) ((name make-i/o-error) (type variable) (from ()) (levels (0 1))) ((name &i/o) (type variable) (from ()) (levels (0 1))) ((name undefined-violation?) (type variable) (from ()) (levels (0 1))) ((name make-undefined-violation) (type variable) (from ()) (levels (0 1))) ((name &undefined) (type variable) (from ()) (levels (0 1))) ((name syntax-violation-subform) (type variable) (from ()) (levels (0 1))) ((name syntax-violation-form) (type variable) (from ()) (levels (0 1))) ((name syntax-violation?) (type variable) (from ()) (levels (0 1))) ((name make-syntax-violation) (type variable) (from ()) (levels (0 1))) ((name &syntax) (type variable) (from ()) (levels (0 1))) ((name lexical-violation?) (type variable) (from ()) (levels (0 1))) ((name make-lexical-violation) (type variable) (from ()) (levels (0 1))) ((name &lexical) (type variable) (from ()) (levels (0 1))) ((name implementation-restriction-violation?) (type variable) (from ()) (levels (0 1))) ((name make-implementation-restriction-violation) (type variable) (from ()) (levels (0 1))) ((name &implementation-restriction) (type variable) (from ()) (levels (0 1))) ((name non-continuable-violation?) (type variable) (from ()) (levels (0 1))) ((name make-non-continuable-violation) (type variable) (from ()) (levels (0 1))) ((name &non-continuable) (type variable) (from ()) (levels (0 1))) ((name condition-who) (type variable) (from ()) (levels (0 1))) ((name who-condition?) (type variable) (from ()) (levels (0 1))) ((name make-who-condition) (type variable) (from ()) (levels (0 1))) ((name &who) (type variable) (from ()) (levels (0 1))) ((name condition-irritants) (type variable) (from ()) (levels (0 1))) ((name irritants-condition?) (type variable) (from ()) (levels (0 1))) ((name make-irritants-condition) (type variable) (from ()) (levels (0 1))) ((name &irritants) (type variable) (from ()) (levels (0 1))) ((name assertion-violation?) (type variable) (from ()) (levels (0 1))) ((name make-assertion-violation) (type variable) (from ()) (levels (0 1))) ((name &assertion) (type variable) (from ()) (levels (0 1))) ((name violation?) (type variable) (from ()) (levels (0 1))) ((name make-violation) (type variable) (from ()) (levels (0 1))) ((name &violation) (type variable) (from ()) (levels (0 1))) ((name error?) (type variable) (from ()) (levels (0 1))) ((name make-error) (type variable) (from ()) (levels (0 1))) ((name &error) (type variable) (from ()) (levels (0 1))) ((name serious-condition?) (type variable) (from ()) (levels (0 1))) ((name make-serious-condition) (type variable) (from ()) (levels (0 1))) ((name &serious) (type variable) (from ()) (levels (0 1))) ((name warning?) (type variable) (from ()) (levels (0 1))) ((name make-warning) (type variable) (from ()) (levels (0 1))) ((name &warning) (type variable) (from ()) (levels (0 1))) ((name condition-message) (type variable) (from ()) (levels (0 1))) ((name message-condition?) (type variable) (from ()) (levels (0 1))) ((name make-message-condition) (type variable) (from ()) (levels (0 1))) ((name &message) (type variable) (from ()) (levels (0 1))) ((name define-condition-type) (type macro) (from (rnrs conditions)) (levels (0 1))) ((name condition-accessor) (type variable) (from ()) (levels (0 1))) ((name condition-predicate) (type variable) (from ()) (levels (0 1))) ((name condition?) (type variable) (from ()) (levels (0 1))) ((name simple-conditions) (type variable) (from ()) (levels (0 1))) ((name condition) (type variable) (from ()) (levels (0 1))) ((name &condition) (type variable) (from ()) (levels (0 1))) ((name guard) (type macro) (from (rnrs exceptions)) (levels (0 1))) ((name raise-continuable) (type variable) (from ()) (levels (0 1))) ((name raise) (type variable) (from ()) (levels (0 1))) ((name with-exception-handler) (type variable) (from ()) (levels (0 1))) ((name define-record-type) (type macro) (from (rnrs records syntactic)) (levels (0 1))) ((name record-field-mutable?) (type variable) (from ()) (levels (0 1))) ((name record-type-field-names) (type variable) (from ()) (levels (0 1))) ((name record-type-opaque?) (type variable) (from ()) (levels (0 1))) ((name record-type-sealed?) (type variable) (from ()) (levels (0 1))) ((name record-type-generative?) (type variable) (from ()) (levels (0 1))) ((name record-type-uid) (type variable) (from ()) (levels (0 1))) ((name record-type-parent) (type variable) (from ()) (levels (0 1))) ((name record-type-name) (type variable) (from ()) (levels (0 1))) ((name record-rtd) (type variable) (from ()) (levels (0 1))) ((name record?) (type variable) (from ()) (levels (0 1))) ((name record-mutator) (type variable) (from ()) (levels (0 1))) ((name record-accessor) (type variable) (from ()) (levels (0 1))) ((name record-predicate) (type variable) (from ()) (levels (0 1))) ((name record-constructor) (type variable) (from ()) (levels (0 1))) ((name make-record-constructor-descriptor) (type variable) (from ()) (levels (0 1))) ((name record-type-descriptor?) (type variable) (from ()) (levels (0 1))) ((name make-record-type-descriptor) (type variable) (from ()) (levels (0 1))) ((name case-lambda) (type macro) (from (rnrs control)) (levels (0 1))) ((name do) (type macro) (from (rnrs control)) (levels (0 1))) ((name unless) (type macro) (from (rnrs control)) (levels (0 1))) ((name when) (type macro) (from (rnrs control)) (levels (0 1))) ((name vector-sort!) (type variable) (from ()) (levels (0 1))) ((name vector-sort) (type variable) (from ()) (levels (0 1))) ((name list-sort) (type variable) (from ()) (levels (0 1))) ((name assq) (type variable) (from ()) (levels (0 1))) ((name assv) (type variable) (from ()) (levels (0 1))) ((name assoc) (type variable) (from ()) (levels (0 1))) ((name assp) (type variable) (from ()) (levels (0 1))) ((name memq) (type variable) (from ()) (levels (0 1))) ((name memv) (type variable) (from ()) (levels (0 1))) ((name member) (type variable) (from ()) (levels (0 1))) ((name memp) (type variable) (from ()) (levels (0 1))) ((name remv) (type variable) (from ()) (levels (0 1))) ((name remq) (type variable) (from ()) (levels (0 1))) ((name remove) (type variable) (from ()) (levels (0 1))) ((name remp) (type variable) (from ()) (levels (0 1))) ((name fold-right) (type variable) (from ()) (levels (0 1))) ((name fold-left) (type variable) (from ()) (levels (0 1))) ((name partition) (type variable) (from ()) (levels (0 1))) ((name filter) (type variable) (from ()) (levels (0 1))) ((name exists) (type variable) (from ()) (levels (0 1))) ((name for-all) (type variable) (from ()) (levels (0 1))) ((name find) (type variable) (from ()) (levels (0 1))) ((name utf32->string) (type variable) (from ()) (levels (0 1))) ((name utf16->string) (type variable) (from ()) (levels (0 1))) ((name utf8->string) (type variable) (from ()) (levels (0 1))) ((name string->utf32) (type variable) (from ()) (levels (0 1))) ((name string->utf16) (type variable) (from ()) (levels (0 1))) ((name string->utf8) (type variable) (from ()) (levels (0 1))) ((name bytevector-ieee-double-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-ieee-double-native-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-ieee-single-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-ieee-single-native-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-ieee-double-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-ieee-double-native-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-ieee-single-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-ieee-single-native-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-s64-native-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-u64-native-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-s64-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-u64-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-s64-native-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-u64-native-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-s64-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-u64-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-s32-native-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-u32-native-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-s32-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-u32-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-s32-native-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-u32-native-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-s32-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-u32-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-s16-native-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-u16-native-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-s16-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-u16-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-s16-native-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-u16-native-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-s16-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-u16-ref) (type variable) (from ()) (levels (0 1))) ((name sint-list->bytevector) (type variable) (from ()) (levels (0 1))) ((name uint-list->bytevector) (type variable) (from ()) (levels (0 1))) ((name bytevetor->sint-list) (type variable) (from ()) (levels (0 1))) ((name bytevetor->uint-list) (type variable) (from ()) (levels (0 1))) ((name bytevector-sint-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-uint-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-sint-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-uint-ref) (type variable) (from ()) (levels (0 1))) ((name u8-list->bytevector) (type variable) (from ()) (levels (0 1))) ((name bytevetor->u8-list) (type variable) (from ()) (levels (0 1))) ((name bytevector-s8-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-u8-set!) (type variable) (from ()) (levels (0 1))) ((name bytevector-s8-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-u8-ref) (type variable) (from ()) (levels (0 1))) ((name bytevector-copy) (type variable) (from ()) (levels (0 1))) ((name bytevector-copy!) (type variable) (from ()) (levels (0 1))) ((name bytevector-fill!) (type variable) (from ()) (levels (0 1))) ((name bytevector=?) (type variable) (from ()) (levels (0 1))) ((name bytevector-length) (type variable) (from ()) (levels (0 1))) ((name make-bytevector) (type variable) (from ()) (levels (0 1))) ((name bytevector?) (type variable) (from ()) (levels (0 1))) ((name native-endianness) (type variable) (from ()) (levels (0 1))) ((name endianness) (type macro) (from (rnrs bytevectors)) (levels (0 1))) ((name string-normalize-nfkc) (type variable) (from ()) (levels (0 1))) ((name string-normalize-nfc) (type variable) (from ()) (levels (0 1))) ((name string-normalize-nfkd) (type variable) (from ()) (levels (0 1))) ((name string-normalize-nfd) (type variable) (from ()) (levels (0 1))) ((name string-ci>=?) (type variable) (from ()) (levels (0 1))) ((name string-ci<=?) (type variable) (from ()) (levels (0 1))) ((name string-ci>?) (type variable) (from ()) (levels (0 1))) ((name string-ci<?) (type variable) (from ()) (levels (0 1))) ((name string-ci=?) (type variable) (from ()) (levels (0 1))) ((name string-foldcase) (type variable) (from ()) (levels (0 1))) ((name string-titlecase) (type variable) (from ()) (levels (0 1))) ((name string-downcase) (type variable) (from ()) (levels (0 1))) ((name string-upcase) (type variable) (from ()) (levels (0 1))) ((name char-general-category) (type variable) (from ()) (levels (0 1))) ((name char-title-case?) (type variable) (from ()) (levels (0 1))) ((name char-lower-case?) (type variable) (from ()) (levels (0 1))) ((name char-upper-case?) (type variable) (from ()) (levels (0 1))) ((name char-whitespace?) (type variable) (from ()) (levels (0 1))) ((name char-numeric?) (type variable) (from ()) (levels (0 1))) ((name char-alphabetic?) (type variable) (from ()) (levels (0 1))) ((name char-ci>=?) (type variable) (from ()) (levels (0 1))) ((name char-ci<=?) (type variable) (from ()) (levels (0 1))) ((name char-ci>?) (type variable) (from ()) (levels (0 1))) ((name char-ci<?) (type variable) (from ()) (levels (0 1))) ((name char-ci=?) (type variable) (from ()) (levels (0 1))) ((name char-foldcase) (type variable) (from ()) (levels (0 1))) ((name char-titlecase) (type variable) (from ()) (levels (0 1))) ((name char-downcase) (type variable) (from ()) (levels (0 1))) ((name char-upcase) (type variable) (from ()) (levels (0 1))) ((name call/cc) (type variable) (from ()) (levels (0 1))) ((name assertion-violation) (type variable) (from ()) (levels (0 1))) ((name error) (type variable) (from ()) (levels (0 1))) ((name vector-for-each) (type variable) (from ()) (levels (0 1))) ((name vector-map) (type variable) (from ()) (levels (0 1))) ((name string-for-each) (type variable) (from ()) (levels (0 1))) ((name symbol=?) (type variable) (from ()) (levels (0 1))) ((name boolean=?) (type variable) (from ()) (levels (0 1))) ((name exact-integer-sqrt) (type variable) (from ()) (levels (0 1))) ((name div0-and-mod0) (type variable) (from ()) (levels (0 1))) ((name mod0) (type variable) (from ()) (levels (0 1))) ((name div0) (type variable) (from ()) (levels (0 1))) ((name div-and-mod) (type variable) (from ()) (levels (0 1))) ((name mod) (type variable) (from ()) (levels (0 1))) ((name div) (type variable) (from ()) (levels (0 1))) ((name nan?) (type variable) (from ()) (levels (0 1))) ((name infinite?) (type variable) (from ()) (levels (0 1))) ((name finite?) (type variable) (from ()) (levels (0 1))) ((name inexact) (type variable) (from ()) (levels (0 1))) ((name exact) (type variable) (from ()) (levels (0 1))) ((name integer-valued?) (type variable) (from ()) (levels (0 1))) ((name rational-valued?) (type variable) (from ()) (levels (0 1))) ((name real-valued?) (type variable) (from ()) (levels (0 1))) ((name zero?) (type variable) (from ()) (levels (0 1))) ((name vector?) (type variable) (from ()) (levels (0 1))) ((name vector-set!) (type variable) (from ()) (levels (0 1))) ((name vector-ref) (type variable) (from ()) (levels (0 1))) ((name vector-length) (type variable) (from ()) (levels (0 1))) ((name vector-fill!) (type variable) (from ()) (levels (0 1))) ((name vector->list) (type variable) (from ()) (levels (0 1))) ((name vector) (type variable) (from ()) (levels (0 1))) ((name values) (type variable) (from ()) (levels (0 1))) ((name truncate) (type variable) (from ()) (levels (0 1))) ((name tan) (type variable) (from ()) (levels (0 1))) ((name symbol?) (type variable) (from ()) (levels (0 1))) ((name symbol->string) (type variable) (from ()) (levels (0 1))) ((name substring) (type variable) (from ()) (levels (0 1))) ((name string?) (type variable) (from ()) (levels (0 1))) ((name string>?) (type variable) (from ()) (levels (0 1))) ((name string>=?) (type variable) (from ()) (levels (0 1))) ((name string=?) (type variable) (from ()) (levels (0 1))) ((name string<?) (type variable) (from ()) (levels (0 1))) ((name string<=?) (type variable) (from ()) (levels (0 1))) ((name string-ref) (type variable) (from ()) (levels (0 1))) ((name string-length) (type variable) (from ()) (levels (0 1))) ((name string-copy) (type variable) (from ()) (levels (0 1))) ((name string-append) (type variable) (from ()) (levels (0 1))) ((name string->symbol) (type variable) (from ()) (levels (0 1))) ((name string->number) (type variable) (from ()) (levels (0 1))) ((name string->list) (type variable) (from ()) (levels (0 1))) ((name string) (type variable) (from ()) (levels (0 1))) ((name sqrt) (type variable) (from ()) (levels (0 1))) ((name sin) (type variable) (from ()) (levels (0 1))) ((name round) (type variable) (from ()) (levels (0 1))) ((name reverse) (type variable) (from ()) (levels (0 1))) ((name real?) (type variable) (from ()) (levels (0 1))) ((name real-part) (type variable) (from ()) (levels (0 1))) ((name rationalize) (type variable) (from ()) (levels (0 1))) ((name rational?) (type variable) (from ()) (levels (0 1))) ((name procedure?) (type variable) (from ()) (levels (0 1))) ((name positive?) (type variable) (from ()) (levels (0 1))) ((name pair?) (type variable) (from ()) (levels (0 1))) ((name odd?) (type variable) (from ()) (levels (0 1))) ((name numerator) (type variable) (from ()) (levels (0 1))) ((name number?) (type variable) (from ()) (levels (0 1))) ((name number->string) (type variable) (from ()) (levels (0 1))) ((name null?) (type variable) (from ()) (levels (0 1))) ((name not) (type variable) (from ()) (levels (0 1))) ((name negative?) (type variable) (from ()) (levels (0 1))) ((name min) (type variable) (from ()) (levels (0 1))) ((name max) (type variable) (from ()) (levels (0 1))) ((name map) (type variable) (from ()) (levels (0 1))) ((name make-vector) (type variable) (from ()) (levels (0 1))) ((name make-string) (type variable) (from ()) (levels (0 1))) ((name make-rectangular) (type variable) (from ()) (levels (0 1))) ((name make-polar) (type variable) (from ()) (levels (0 1))) ((name magnitude) (type variable) (from ()) (levels (0 1))) ((name log) (type variable) (from ()) (levels (0 1))) ((name list?) (type variable) (from ()) (levels (0 1))) ((name list-tail) (type variable) (from ()) (levels (0 1))) ((name list-ref) (type variable) (from ()) (levels (0 1))) ((name list->vector) (type variable) (from ()) (levels (0 1))) ((name list->string) (type variable) (from ()) (levels (0 1))) ((name list) (type variable) (from ()) (levels (0 1))) ((name length) (type variable) (from ()) (levels (0 1))) ((name lcm) (type variable) (from ()) (levels (0 1))) ((name integer?) (type variable) (from ()) (levels (0 1))) ((name integer->char) (type variable) (from ()) (levels (0 1))) ((name inexact?) (type variable) (from ()) (levels (0 1))) ((name imag-part) (type variable) (from ()) (levels (0 1))) ((name gcd) (type variable) (from ()) (levels (0 1))) ((name for-each) (type variable) (from ()) (levels (0 1))) ((name floor) (type variable) (from ()) (levels (0 1))) ((name expt) (type variable) (from ()) (levels (0 1))) ((name exp) (type variable) (from ()) (levels (0 1))) ((name exact?) (type variable) (from ()) (levels (0 1))) ((name even?) (type variable) (from ()) (levels (0 1))) ((name eqv?) (type variable) (from ()) (levels (0 1))) ((name equal?) (type variable) (from ()) (levels (0 1))) ((name eq?) (type variable) (from ()) (levels (0 1))) ((name dynamic-wind) (type variable) (from ()) (levels (0 1))) ((name denominator) (type variable) (from ()) (levels (0 1))) ((name cos) (type variable) (from ()) (levels (0 1))) ((name cons) (type variable) (from ()) (levels (0 1))) ((name complex?) (type variable) (from ()) (levels (0 1))) ((name char>=?) (type variable) (from ()) (levels (0 1))) ((name char<=?) (type variable) (from ()) (levels (0 1))) ((name char>?) (type variable) (from ()) (levels (0 1))) ((name char<?) (type variable) (from ()) (levels (0 1))) ((name char=?) (type variable) (from ()) (levels (0 1))) ((name char->integer) (type variable) (from ()) (levels (0 1))) ((name char?) (type variable) (from ()) (levels (0 1))) ((name ceiling) (type variable) (from ()) (levels (0 1))) ((name cddddr) (type variable) (from ()) (levels (0 1))) ((name cdddar) (type variable) (from ()) (levels (0 1))) ((name cddadr) (type variable) (from ()) (levels (0 1))) ((name cddaar) (type variable) (from ()) (levels (0 1))) ((name cdaddr) (type variable) (from ()) (levels (0 1))) ((name cdadar) (type variable) (from ()) (levels (0 1))) ((name cdaadr) (type variable) (from ()) (levels (0 1))) ((name cdaaar) (type variable) (from ()) (levels (0 1))) ((name cadddr) (type variable) (from ()) (levels (0 1))) ((name caddar) (type variable) (from ()) (levels (0 1))) ((name cadadr) (type variable) (from ()) (levels (0 1))) ((name cadaar) (type variable) (from ()) (levels (0 1))) ((name caaddr) (type variable) (from ()) (levels (0 1))) ((name caadar) (type variable) (from ()) (levels (0 1))) ((name caaadr) (type variable) (from ()) (levels (0 1))) ((name caaaar) (type variable) (from ()) (levels (0 1))) ((name cdddr) (type variable) (from ()) (levels (0 1))) ((name cddar) (type variable) (from ()) (levels (0 1))) ((name cdadr) (type variable) (from ()) (levels (0 1))) ((name cdaar) (type variable) (from ()) (levels (0 1))) ((name caddr) (type variable) (from ()) (levels (0 1))) ((name cadar) (type variable) (from ()) (levels (0 1))) ((name caadr) (type variable) (from ()) (levels (0 1))) ((name caaar) (type variable) (from ()) (levels (0 1))) ((name cddr) (type variable) (from ()) (levels (0 1))) ((name cdar) (type variable) (from ()) (levels (0 1))) ((name cadr) (type variable) (from ()) (levels (0 1))) ((name caar) (type variable) (from ()) (levels (0 1))) ((name cdr) (type variable) (from ()) (levels (0 1))) ((name car) (type variable) (from ()) (levels (0 1))) ((name call-with-values) (type variable) (from ()) (levels (0 1))) ((name call-with-current-continuation) (type variable) (from ()) (levels (0 1))) ((name boolean?) (type variable) (from ()) (levels (0 1))) ((name atan) (type variable) (from ()) (levels (0 1))) ((name asin) (type variable) (from ()) (levels (0 1))) ((name apply) (type variable) (from ()) (levels (0 1))) ((name append) (type variable) (from ()) (levels (0 1))) ((name acos) (type variable) (from ()) (levels (0 1))) ((name abs) (type variable) (from ()) (levels (0 1))) ((name >=) (type variable) (from ()) (levels (0 1))) ((name >) (type variable) (from ()) (levels (0 1))) ((name =) (type variable) (from ()) (levels (0 1))) ((name <=) (type variable) (from ()) (levels (0 1))) ((name <) (type variable) (from ()) (levels (0 1))) ((name /) (type variable) (from ()) (levels (0 1))) ((name -) (type variable) (from ()) (levels (0 1))) ((name +) (type variable) (from ()) (levels (0 1))) ((name *) (type variable) (from ()) (levels (0 1))) ((name identifier-syntax) (type macro) (from (core identifier-syntax)) (levels (0 1))) ((name syntax-rules) (type macro) (from (core syntax-rules)) (levels (0 1))) ((name unquote-splicing) (type macro) (from (core quasiquote)) (levels (0 1))) ((name unquote) (type macro) (from (core quasiquote)) (levels (0 1))) ((name quasiquote) (type macro) (from (core quasiquote)) (levels (0 1))) ((name assert) (type macro) (from (rnrs base)) (levels (0 1))) ((name =>) (type macro) (from (core derived)) (levels (0 1))) ((name else) (type macro) (from (core derived)) (levels (0 1))) ((name cond) (type macro) (from (core derived)) (levels (0 1))) ((name case) (type macro) (from (core derived)) (levels (0 1))) ((name let*-values) (type macro) (from (core let-values)) (levels (0 1))) ((name let-values) (type macro) (from (core let-values)) (levels (0 1))) ((name letrec*) (type macro) (from (core let)) (levels (0 1))) ((name letrec) (type macro) (from (core let)) (levels (0 1))) ((name let*) (type macro) (from (core derived)) (levels (0 1))) ((name let) (type macro) (from (core let)) (levels (0 1))) ((name ...) (type macro) (from ()) (levels (0 1))) ((name _) (type macro) (from ()) (levels (0 1))) ((name letrec-syntax) (type macro) (from ()) (levels (0 1))) ((name let-syntax) (type macro) (from ()) (levels (0 1))) ((name define-syntax) (type macro) (from ()) (levels (0 1))) ((name define) (type macro) (from ()) (levels (0 1))) ((name or) (type macro) (from ()) (levels (0 1))) ((name and) (type macro) (from ()) (levels (0 1))) ((name set!) (type macro) (from ()) (levels (0 2 1))) ((name quote) (type macro) (from ()) (levels (0 1))) ((name lambda) (type macro) (from ()) (levels (0 1))) ((name if) (type macro) (from ()) (levels (0 1))) ((name begin) (type macro) (from ()) (levels (0 1)))))