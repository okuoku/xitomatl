;; Copyright (c) 2009 Derick Eddington
;;
;; Permission is hereby granted, free of charge, to any person obtaining a
;; copy of this software and associated documentation files (the "Software"),
;; to deal in the Software without restriction, including without limitation
;; the rights to use, copy, modify, merge, publish, distribute, sublicense,
;; and/or sell copies of the Software, and to permit persons to whom the
;; Software is furnished to do so, subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included in
;; all copies or substantial portions of the Software.
;;
;; Except as contained in this notice, the name(s) of the above copyright
;; holders shall not be used in advertising or otherwise to promote the sale,
;; use or other dealings in this Software without prior written authorization.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

#!r6rs
(import
  (rnrs)
  (only (xitomatl file-system base) directory-walk-enumerator)
  (only (xitomatl enumerators) fold/enumerator)
  (only (xitomatl file-system paths) path-join)
  (only (xitomatl irregex) irregex-match)
  (only (xitomatl match) match)
  (only (xitomatl ports) read-all)
  (only (xitomatl library-utils) library-name<?)
  (only (xitomatl lists) remove-dups)
  (only (xitomatl common) fprintf))

(define libraries-names
  (fold/enumerator
   (directory-walk-enumerator)
   "./"
   (lambda (path dirs files syms accum)
     (if (irregex-match "\\./(\\.bzr|gtk|tests|utils|programs).*" path)
       (values dirs accum)
       (let loop ([files (filter (lambda (f) (irregex-match ".+\\.sls" f))
                                 files)]
                  [accum accum])
         (if (null? files)
           (values dirs accum)
           (loop (cdr files)
                 (match (call-with-input-file (path-join path (car files)) read-all)
                   [(('library name . _) (... 1))
                    (apply cons* (reverse (cons accum name)))]
                   [_ accum]))))))
   '()))

(define libraries-names/prepared
  (list-sort library-name<?
             (remove-dups libraries-names)))

;; for Ikarus
(call-with-output-file "utils/compile-all.ikarus.sps"
  (lambda (fop)
    (define (pf . a) (apply fprintf fop a))
    (pf ";; Automatically generated by ~a\n" (car (command-line)))
    (pf ";; Do: ikarus --compile-dependencies compile-all.ikarus.sps\n")
    (pf "(import\n")
    (for-each (lambda (ln)
                (pf "  (only ~s)\n" ln))
              libraries-names/prepared)
    (pf ")\n")))

;; TODO?: For other implementations?
