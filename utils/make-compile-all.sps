#!r6rs
;; Copyright (c) 2009 Derick Eddington.  All rights reserved.  Licensed under an
;; MIT-style license.  My license is in the file named LICENSE from the original
;; collection this file is distributed with.  If this file is redistributed with
;; some other collection, my license must also be included.

(import
  (rnrs)
  (only (xitomatl file-system base) directory-walk-enumerator)
  (only (xitomatl enumerators) fold/enumerator)
  (only (xitomatl file-system paths) path-join)
  (only (xitomatl irregex) irregex-match)
  (only (xitomatl match) match)
  (only (xitomatl ports) read-all)
  (only (xitomatl library-utils) library-name<?)
  (only (xitomatl lists) remove-dups)
  (only (xitomatl common) fprintf))

(define libraries-names
  (fold/enumerator
   (directory-walk-enumerator)
   "./"
   (lambda (path dirs files syms accum)
     (if (irregex-match "\\./(\\.bzr|gtk|tests|utils|programs).*" path)
       (values dirs accum)
       (let loop ((files (filter (lambda (f) (irregex-match ".+\\.sls" f))
                                 files))
                  (accum accum))
         (if (null? files)
           (values dirs accum)
           (loop (cdr files)
                 (match (call-with-input-file (path-join path (car files)) read-all)
                   ((('library name . _) (... 1))
                    (apply cons* (reverse (cons accum name))))
                   (_ accum)))))))
   '()))

(define libraries-names/prepared
  (list-sort library-name<?
             (remove-dups libraries-names)))

;; for Ikarus
(call-with-output-file "utils/compile-all.ikarus.sps"
  (lambda (fop)
    (define (pf . a) (apply fprintf fop a))
    (pf ";; Automatically generated by ~a\n" (car (command-line)))
    (pf ";; Do: ikarus --compile-dependencies compile-all.ikarus.sps\n")
    (pf "(import\n")
    (for-each (lambda (ln)
                (pf "  (only ~s)\n" ln))
              libraries-names/prepared)
    (pf ")\n")))

;; TODO?: For other implementations?
